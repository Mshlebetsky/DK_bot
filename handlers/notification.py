from aiogram import Router, types, F
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime, timedelta
from sqlalchemy import select
import logging

from database.models import Users, Events, UserEventTracking
from filter.filter import ChatTypeFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from database.orm_query import orm_get_user, orm_update_user_subscription, orm_add_user


logger = logging.getLogger("bot.handlers.reminders")


notificate_router = Router()
notificate_router.message.filter(ChatTypeFilter(["private"]))


# ---------- –£—Ç–∏–ª–∏—Ç–∞ ----------
async def get_or_create_user(session: AsyncSession, tg_user: types.User):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ"""
    user = await orm_get_user(session, tg_user.id)
    if not user:
        user = await orm_add_user(
            session,
            user_id=tg_user.id,
            username=tg_user.username,
            first_name=tg_user.first_name,
            last_name=tg_user.last_name,
        )
    return user


# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫ ----------
def get_subscriptions_kb(user):
    buttons = []

    # –ù–æ–≤–æ—Å—Ç–∏
    if user.news_subscribed:
        buttons.append([InlineKeyboardButton(text="‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="unsub_news")])
    else:
        buttons.append([InlineKeyboardButton(text="‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="sub_news")])

    # –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    if user.events_subscribed:
        buttons.append([InlineKeyboardButton(text="‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∞—Ñ–∏—à—É", callback_data="unsub_events")])
    else:
        buttons.append([InlineKeyboardButton(text="‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∞—Ñ–∏—à—É", callback_data="sub_events")])

    buttons.append([InlineKeyboardButton(text="üè† –í –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def build_subscriptions_text(session, user_id: int) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: –ø–æ–¥–ø–∏—Å–∫–∏ + –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ).
    """
    # –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(UserEventTracking.event_id).where(UserEventTracking.user_id == user_id)
    )
    event_ids = result.scalars().all()

    text = "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.\n\n"

    if event_ids:
        now = datetime.now()
        events = await session.execute(
            select(Events).where(
                Events.id.in_(event_ids),
                Events.date >= now  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ
            )
        )
        events = events.scalars().all()

        if events:
            text += "üìå –í—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n"
            for ev in events:
                text += f" ‚Ä¢ <b>{ev.name}</b> ‚Äî {ev.date:%d.%m.%Y %H:%M}\n"
        else:
            text += "üìå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n"
    else:
        text += "üìå –í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n"

    return text


# ---------- –°–æ–æ–±—â–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É) ----------
@notificate_router.message(Command('notifications'))
async def show_subscriptions(message: types.Message, session: AsyncSession, user: Users):
    text = await build_subscriptions_text(session, user.user_id)
    await message.answer(text, reply_markup=get_subscriptions_kb(user))



@notificate_router.callback_query(F.data == 'notifications_')
async def show_subscriptions_(callback: CallbackQuery, session: AsyncSession):
    user = await orm_get_user(session, callback.from_user.id)
    text = await build_subscriptions_text(session, callback.from_user.id)
    await callback.message.edit_text(text, reply_markup=get_subscriptions_kb(user))


# ---------- –ü–æ–¥–ø–∏—Å–∫–∞ / –û—Ç–ø–∏—Å–∫–∞ ----------
@notificate_router.callback_query(F.data.in_(["sub_news", "unsub_news", "sub_events", "unsub_events"]))
async def toggle_subscription(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id

    if callback.data == "sub_news":
        await orm_update_user_subscription(session, user_id, news=True)
        text = "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!"
    elif callback.data == "unsub_news":
        await orm_update_user_subscription(session, user_id, news=False)
        text = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞."
    elif callback.data == "sub_events":
        await orm_update_user_subscription(session, user_id, events=True)
        text = "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!"
    else:
        await orm_update_user_subscription(session, user_id, events=False)
        text = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."

    user = await orm_get_user(session, user_id)
    await callback.message.edit_reply_markup(reply_markup=get_subscriptions_kb(user))
    await callback.answer(text)


# ---------- –†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–æ–±—ã—Ç–∏–π ----------
async def notify_subscribers(bot, session: AsyncSession, text: str, img: str | None = None, type_: str = "news"):
    if type_ == "news":
        filter_field = Users.news_subscribed
    else:
        filter_field = Users.events_subscribed

    result = await session.execute(select(Users.user_id).where(filter_field == True))
    subscribers = result.scalars().all()
    kb_news = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üóû–ù–æ–≤–æ—Å—Ç–∏", callback_data="list_news")]])
    kb_events = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üìÜ–ê—Ñ–∏—à–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data="list_events")]])
    for user_id in subscribers:
        try:
            try:
                await bot.send_photo(user_id, img, caption=text[:1024], parse_mode="HTML", reply_markup=kb_news if type_ == 'news' else kb_events)
            except:
                await bot.send_message(user_id, text[:4096], parse_mode="HTML")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# ---------- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö ----------
async def send_event_reminders(bot, session):
    now = datetime.now().date()
    two_weeks = now + timedelta(days=2)

    # –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏
    result = await session.execute(
        select(Events).where(Events.date.between(now, two_weeks))
    )
    events = result.scalars().all()

    if not events:
        logger.info("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏")
        return

    for event in events:
        # –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–µ
        tracking_users = await session.execute(
            select(UserEventTracking.user_id).where(UserEventTracking.event_id == event.id)
        )
        user_ids = tracking_users.scalars().all()

        if not user_ids:
            continue

        # —Å—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö
        days_left = (event.date.date() - now).days
        if days_left < 0:
            continue
        elif days_left == 0:
            text = (
                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
                f"–£–∂–µ –°–µ–≥–æ–¥–Ω—è —Å–æ—Å—Ç–æ–∏—Ç—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n\n"
                f"<b>{event.name}</b>\n"
                f"üóì {event.date:%d.%m.%Y %H:%M}\n\n"
                f"{(event.description or '')[:200]}..."
            )
        else:
            text = (
                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
                f"–ß–µ—Ä–µ–∑ {days_left} {'–¥–µ–Ω—å' if days_left == 1 else '–¥–Ω–µ–π'} —Å–æ—Å—Ç–æ–∏—Ç—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n\n"
                f"<b>{event.name}</b>\n"
                f"üóì {event.date:%d.%m.%Y %H:%M}\n\n"
                f"{(event.description or '')[:200]}..."
            )

        # —Ä–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for user_id in user_ids:
            try:
                if event.img:
                    try:
                        await bot.send_photo(user_id, event.img, caption=text, parse_mode="HTML",reply_markup=InlineKeyboardMarkup(
                            inline_keyboard=[[InlineKeyboardButton(text="üìÜ–ê—Ñ–∏—à–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data="list_events")]]))
                    except Exception:
                        await bot.send_message(user_id, text, parse_mode="HTML")
                else:
                    await bot.send_message(user_id, text, parse_mode="HTML")

                logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ —Å–æ–±—ã—Ç–∏–∏ {event.id}")
            except Exception as e:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user_id}: {e}")


logger = logging.getLogger("bot.broadcast")


async def notify_all_users(bot, session, text: str, img: str | None = None):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Users
    """
    # –¥–æ—Å—Ç–∞—ë–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    result = await session.execute(select(Users.user_id))
    user_ids = result.scalars().all()

    logger.info(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

    kb_main = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )

    for user_id in user_ids:
        try:
            if img:
                try:
                    await bot.send_photo(
                        user_id,
                        img,
                        caption=text[:1024],
                        parse_mode="HTML",
                        reply_markup=kb_main,
                    )
                except Exception:
                    await bot.send_message(
                        user_id,
                        text[:4096],
                        parse_mode="HTML",
                        reply_markup=kb_main,
                    )
            else:
                await bot.send_message(
                    user_id,
                    text[:4096],
                    parse_mode="HTML",
                    reply_markup=kb_main,
                )
        except Exception as e:
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")