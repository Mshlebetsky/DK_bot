import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, desc

from database.models import News
from database.orm_query import orm_get_news
from logic.helper import Big_litter_start

# --- Router ---
news_router = Router()

# --- Config ---
NEWS_PER_PAGE = 8

# --- Logger ---
logger = logging.getLogger('bot.handlers.news_list')


# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def get_news_card_keyboard(news_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìã –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="list_all_news"),
                InlineKeyboardButton(text="‚Ñπ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"news_detail:{news_id}")
            ],
            [
                InlineKeyboardButton(text="‚èÆ –ù–∞–∑–∞–¥", callback_data=f"news_next:{news_id}"),
                InlineKeyboardButton(text="‚è≠ –î–∞–ª–µ–µ", callback_data=f"news_prev:{news_id}")
            ],
            [InlineKeyboardButton(text="üè† –í –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )


def get_all_news_keyboard(news: list[News], page: int, total_pages: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    keyboard = [
        [InlineKeyboardButton(
            text=Big_litter_start(n.name[:40]),
            callback_data=f"news_card:{n.id}"
        )]
        for n in news
    ]

    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚èÆ –ù–∞–∑–∞–¥", callback_data=f"all_news_page:{page-1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="‚è≠ –î–∞–ª–µ–µ", callback_data=f"all_news_page:{page+1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)
        keyboard.append([InlineKeyboardButton(text="üè† –í –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# ---------- –†–µ–Ω–¥–µ—Ä—ã ----------
async def render_news_card(target: Message | CallbackQuery, session: AsyncSession, news_id: int):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏"""
    try:
        news = await orm_get_news(session, news_id)
        if not news:
            logger.warning("–ù–æ–≤–æ—Å—Ç—å —Å id=%s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", news_id)
            text = "‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            if isinstance(target, CallbackQuery):
                await target.answer(text, show_alert=True)
            else:
                await target.answer(text)
            return

        description = news.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
        short_desc = description[:350] + (
            "<i>‚Ä¶ \n\n–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>\"–ü–æ–¥—Ä–æ–±–Ω–µ–µ\"</b> —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–æ–ª—å—à–µ</i>"
            if len(description) > 350 else ""
        )

        # –°–æ—Å–µ–¥–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        neighbors = (
            await session.execute(
                select(News).where(News.is_shown.is_(True)).order_by(desc(News.id))
            )
        ).scalars().all()

        idx = next((i for i, n in enumerate(neighbors) if n.id == news.id), None)
        neighbor_titles = []
        if idx is not None:
            if idx > 0:
                prev_news = neighbors[idx - 1]
                short_name = prev_news.name[:100] + ("‚Ä¶" if len(prev_news.name) > 100 else "")
                neighbor_titles.append(f"‚¨Ö <i>–ü—Ä–µ–¥—ã–¥—É—â–∞—è:</i> \nüóû {Big_litter_start(short_name)}")

            next_two = neighbors[idx + 1: idx + 3]
            if next_two:
                titles = "\n".join(
                    f"üóû {Big_litter_start(n.name[:100]) + ('‚Ä¶' if len(n.name) > 100 else '')}"
                    for n in next_two
                )
                neighbor_titles.append(f"‚û° <i>–°–ª–µ–¥—É—é—â–∏–µ:</i>\n{titles}")

        text = f"<b>{Big_litter_start(news.name)}</b>\n\n{short_desc}\n\n" + "\n".join(neighbor_titles)
        kb = get_news_card_keyboard(news.id)

        msg_target = target.message if isinstance(target, CallbackQuery) else target
        try:
            if news.img:
                await msg_target.delete()
                await msg_target.answer_photo(news.img, caption=text[:1024], reply_markup=kb, parse_mode="HTML")
            else:
                if getattr(msg_target, "text", None):
                    await msg_target.edit_text(text[:4095], reply_markup=kb, parse_mode="HTML")
                else:
                    await msg_target.delete()
                    await msg_target.answer(text[:4095], reply_markup=kb, parse_mode="HTML")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: %s", e)
            await msg_target.answer(text[:4095], reply_markup=kb, parse_mode="HTML")

        if isinstance(target, CallbackQuery):
            await target.answer()

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ render_news_card: %s", e)


async def render_news_detail(target: Message | CallbackQuery, news: News):
    """–ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏"""
    try:
        text = f"<b>{news.name}</b>\n\n{news.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"news_card:{news.id}")],
                [InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://–¥–∫-—è—É–∑–∞.—Ä—Ñ/news/")]
            ]
        )

        msg_target = target.message if isinstance(target, CallbackQuery) else target
        try:
            if news.img:
                await msg_target.delete()
                await msg_target.answer_photo(news.img, caption=text[:1024], reply_markup=kb, parse_mode="HTML")
            else:
                if getattr(msg_target, "text", None):
                    await msg_target.edit_text(text[:4095], reply_markup=kb, parse_mode="HTML")
                else:
                    await msg_target.delete()
                    await msg_target.answer(text[:4095], reply_markup=kb, parse_mode="HTML")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: %s", e)
            await msg_target.answer(text[:4095], reply_markup=kb, parse_mode="HTML")

        if isinstance(target, CallbackQuery):
            await target.answer()

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ render_news_detail: %s", e)


async def render_all_news(target: Message | CallbackQuery, session: AsyncSession, page: int = 1):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        offset = (page - 1) * NEWS_PER_PAGE
        news = (
            await session.execute(
                select(News).where(News.is_shown.is_(True)).order_by(desc(News.id)).offset(offset).limit(NEWS_PER_PAGE)
            )
        ).scalars().all()

        total = (await session.execute(select(func.count(News.id)))).scalar_one()
        total_pages = (total + NEWS_PER_PAGE - 1) // NEWS_PER_PAGE

        text = "üìã <b>–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:</b>\n\n"
        keyboard = get_all_news_keyboard(news, page, total_pages)

        msg_target = target.message if isinstance(target, CallbackQuery) else target
        try:
            if getattr(msg_target, "text", None):
                await msg_target.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            else:
                await msg_target.delete()
                await msg_target.answer(text, reply_markup=keyboard, parse_mode="HTML")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: %s", e)
            await msg_target.answer(text, reply_markup=keyboard, parse_mode="HTML")

        if isinstance(target, CallbackQuery):
            await target.answer()

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ render_all_news: %s", e)


# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------
@news_router.callback_query(F.data == "list_news")
async def list_news_handler(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å"""
    try:
        last_news = (
            await session.execute(
                select(News).where(News.is_shown.is_(True)).order_by(desc(News.id)).limit(1)
            )
        ).scalars().first()

        if last_news:
            await render_news_card(callback, session, last_news.id)
        else:
            await callback.answer("‚ùå –ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç", show_alert=True)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ list_news_handler: %s", e)
        await callback.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π", show_alert=True)


@news_router.callback_query(F.data.startswith("news_card:"))
async def news_card_handler(callback: CallbackQuery, session: AsyncSession):
    news_id = int(callback.data.split(":")[1])
    await render_news_card(callback, session, news_id)


@news_router.callback_query(F.data.startswith("news_detail:"))
async def news_detail_handler(callback: CallbackQuery, session: AsyncSession):
    news_id = int(callback.data.split(":")[1])
    news = await orm_get_news(session, news_id)
    if news:
        await render_news_detail(callback, news)
    else:
        await callback.answer("–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)


@news_router.callback_query(F.data == "list_all_news")
async def list_all_news_handler(callback: CallbackQuery, session: AsyncSession):
    await render_all_news(callback, session, page=1)


@news_router.callback_query(F.data.startswith("all_news_page:"))
async def all_news_page_handler(callback: CallbackQuery, session: AsyncSession):
    page = int(callback.data.split(":")[1])
    await render_all_news(callback, session, page)


@news_router.callback_query(F.data.startswith("news_prev:"))
async def news_prev_handler(callback: CallbackQuery, session: AsyncSession):
    """–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏"""
    current_id = int(callback.data.split(":")[1])
    prev_news = (
        await session.execute(
            select(News).where(News.is_shown.is_(True), News.id < current_id).order_by(desc(News.id)).limit(1)
        )
    ).scalars().first()

    if prev_news:
        await render_news_card(callback, session, prev_news.id)
    else:
        await callback.answer("–≠—Ç–æ —Å–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –Ω–æ–≤–æ—Å—Ç—å")


@news_router.callback_query(F.data.startswith("news_next:"))
async def news_next_handler(callback: CallbackQuery, session: AsyncSession):
    """–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏"""
    current_id = int(callback.data.split(":")[1])
    next_news = (
        await session.execute(
            select(News).where(News.is_shown.is_(True), News.id > current_id).order_by(News.id).limit(1)
        )
    ).scalars().first()

    if next_news:
        await render_news_card(callback, session, next_news.id)
    else:
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å")