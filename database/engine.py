import os
import logging
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker, create_async_engine
from database.models import Base

# ================= –õ–û–ì–ò–†–û–í–ê–ù–ò–ï =================
logger = logging.getLogger("bot.database")

# ================= –î–í–ò–ñ–û–ö =================
DB_URL = os.getenv("DB_LITE")
if not DB_URL:
    logger.critical("‚ùå –ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DB_LITE")
    raise RuntimeError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç DB_LITE –≤ .env")

# –°–æ–∑–¥–∞—ë–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ SQLAlchemy
engine = create_async_engine(
    DB_URL,
    echo=False,   # echo=True ‚Äî –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
    future=True
)

# –§–∞–±—Ä–∏–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
Session = async_sessionmaker(
    bind=engine,
    class_=AsyncSession,
    expire_on_commit=False
)


# ================= –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–î =================
async def create_db() -> None:
    """–°–æ–∑–¥–∞—ë—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        logger.info("üì¶ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã (–∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ë–î: {e}", exc_info=True)
        raise


async def drop_db() -> None:
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.drop_all)
        logger.warning("‚ö†Ô∏è –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ë–î: {e}", exc_info=True)
        raise