import os
import asyncio
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from apscheduler.triggers.cron import CronTrigger
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

from handlers.notification import send_event_reminders
from database.engine import Session, create_db, drop_db
from logic.scrap_control import scrap_everything
from middlewares.db import DataBaseSession
from filter.filter import get_admins_ids
from logic.cmd_list import private

# –†–æ—É—Ç–µ—Ä—ã
from handlers.user_private import user_private_router
from handlers.admin_panel import admin_router, admin_manage_router
from handlers.admin_news import admin_news_router
from handlers.admin_events import admin_events_router
from handlers.admin_studios import admin_studios_router
from handlers.Studio_list import studios_router
from handlers.Event_list import event_router
from handlers.News_list import news_router
from handlers.notification import notificate_router
from handlers.Servi—Åes import servises_router
from handlers.menu2 import menu2_router

# ================= –õ–û–ì–ò–†–û–í–ê–ù–ò–ï =================
logger = logging.getLogger("bot")
logger.setLevel(logging.DEBUG)

# –ö–æ–Ω—Å–æ–ª—å (INFO –∏ –≤—ã—à–µ)
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_format = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s")
console_handler.setFormatter(console_format)

# –§–∞–π–ª (DEBUG –∏ –≤—ã—à–µ)
file_handler = logging.FileHandler("bot.log", encoding="utf-8")
file_handler.setLevel(logging.DEBUG)
file_format = logging.Formatter(
    "%(asctime)s [%(levelname)s] %(name)s:%(lineno)d | %(message)s"
)
file_handler.setFormatter(file_format)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.addHandler(console_handler)
logger.addHandler(file_handler)


# ================= –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê =================
load_dotenv()
token = os.getenv("TOKEN")

if not token:
    logger.critical("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –≤ .env (TOKEN)")
    raise RuntimeError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TOKEN –≤ .env")

bot = Bot(
    token=token,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    timeout=60
)

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î
bot.my_admins_list = get_admins_ids()

# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()


# ================= –†–û–£–¢–ï–†–´ =================
def setup_routers(dp: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤."""
    routers = [
        menu2_router,
        admin_manage_router,
        news_router,
        notificate_router,
        user_private_router,
        admin_router,
        admin_events_router,
        admin_news_router,
        admin_studios_router,
        event_router,
        studios_router,
        servises_router,
    ]
    for router in routers:
        dp.include_router(router)
    logger.info("‚úÖ –í—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")


# ================= APScheduler =================
def setup_scheduler(bot: Bot) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á."""
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

    # –û–ø–æ–≤–µ—â–µ–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –≤ 9:00
    scheduler.add_job(
        send_reminders_job,
        trigger=CronTrigger(hour=9, minute=0),
        args=(bot,),
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚Äî –≤ 9:00 –∏ 17:00
    scheduler.add_job(
        scrap_everything,
        trigger=CronTrigger(hour=9, minute=0),
        args=(bot, True),
    )
    scheduler.add_job(
        scrap_everything,
        trigger=CronTrigger(hour=17, minute=0),
        args=(bot, True),
    )

    scheduler.start()
    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")


async def send_reminders_job(bot: Bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    try:
        session = Session()
        async with session:
            await send_event_reminders(bot, session)
        logger.info("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}", exc_info=True)


# ================= STARTUP / SHUTDOWN =================
async def on_startup(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    run_param = False
    if run_param:
        await drop_db()
    await create_db()
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


async def on_shutdown(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞."""
    logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# ================= MAIN =================
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞."""
    while True:
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è —Å—Ç–∞—Ä—Ç–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            dp.startup.register(on_startup)
            dp.shutdown.register(on_shutdown)

            # Middleware –¥–ª—è –ë–î
            dp.update.middleware(DataBaseSession(session_pool=Session))

            # –£–¥–∞–ª—è–µ–º webhook (–Ω–∞ —Å–ª—É—á–∞–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)
            await bot.delete_webhook(drop_pending_updates=True)

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
            setup_routers(dp)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            setup_scheduler(bot)

            # –ó–∞–ø—É—Å–∫ polling
            logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ long polling")
            await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ polling: {e}", exc_info=True)
        else:
            break
        await asyncio.sleep(1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é (KeyboardInterrupt)")