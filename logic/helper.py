from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup
import re

def is_valid_url(url: str) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É"""
    if not url:
        return False
    pattern = r"^https?:\/\/.*\.(jpg|jpeg|png|gif|webp)(\?.*)?$"
    return re.match(pattern, url, re.IGNORECASE) is not None


async def send_photo_with_text(
    bot: Bot,
    chat_id: int,
    photo: str,
    text: str,
    reply_markup: InlineKeyboardMarkup | None = None,
    parse_mode: str = "HTML"
):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–ª–ø–µ—Ä:
    - –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π URL —Ñ–æ—Ç–æ ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    - –µ—Å–ª–∏ URL –±–∏—Ç—ã–π –∏–ª–∏ Telegram –µ–≥–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç ‚Üí —à–ª—ë–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    """
    if photo and is_valid_url(photo):
        try:
            if len(text) <= 1024:
                await bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
            else:
                await bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    reply_markup=reply_markup
                )
                await bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    parse_mode=parse_mode
                )
            return
        except Exception as e:
            # fallback –µ—Å–ª–∏ Telegram –Ω–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å
            print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ {photo}: {e}")

    # –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–æ –±–∏—Ç–æ–µ
    await bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=reply_markup,
        parse_mode=parse_mode
    )

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


async def send_entity_card(callback, entity, back_cb: str, detail_cb: str):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—É—â–Ω–æ—Å—Ç–∏ (—Å—Ç—É–¥–∏—è, —Å–æ–±—ã—Ç–∏–µ, –Ω–æ–≤–æ—Å—Ç—å).

    :param callback: –æ–±—ä–µ–∫—Ç CallbackQuery
    :param entity: –æ–±—ä–µ–∫—Ç SQLAlchemy (Studios, Events, News)
    :param back_cb: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    :param detail_cb: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
    """

    # –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = f"<b>{entity.name}</b>\n\n"
    description = (entity.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
    short_desc = description[:500] + ("‚Ä¶" if len(description) > 500 else "")
    text += short_desc

    # –ö–Ω–æ–ø–∫–∏
    buttons = [
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=back_cb)],
        [InlineKeyboardButton(text="‚Ñπ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=detail_cb)]
    ]
    if getattr(entity, "link", None):  # –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
        if entity.link:
            buttons.append([InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏", url=entity.link)])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if getattr(entity, "img", None) and entity.img:
        try:
            await callback.message.answer_photo(
                photo=entity.img,
                caption=text[:1024],  # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
                reply_markup=kb
            )
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await callback.message.answer(text, reply_markup=kb)
    else:
        await callback.message.answer(text, reply_markup=kb)

    await callback.answer()


async def send_entity_full(callback, entity, back_cb: str):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏
    """
    text = f"<b>{entity.name}</b>\n\n{entity.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"

    buttons = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=back_cb)]]
    if getattr(entity, "link", None):
        if entity.link:
            buttons.append([InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏", url=entity.link)])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.answer(text, reply_markup=kb)
    await callback.answer()
