import asyncio

from aiogram import Router, F, types, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import or_f,Command

from sqlalchemy.ext.asyncio import AsyncSession

from database import orm_query
from database.orm_query import (
    orm_add_news, orm_update_news, orm_delete_news,
    orm_get_all_news
)
from handlers.notification import notify_subscribers
from logic.scrap_news import update_all_news
from filter.filter import IsAdmin, ChatTypeFilter, IsSuperAdmin, IsEditor

admin_news_router = Router()
admin_news_router.message.filter(or_f(IsSuperAdmin(),IsEditor()))


# --- FSM ---
class AddNewsFSM(StatesGroup):
    name = State()
    description = State()
    img = State()
    notify = State()
class EditNewsFSM(StatesGroup):
    id = State()
    field = State()
    value = State()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_admin_news_kb():
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data="add_news")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data="edit_news")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data="delete_news")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π", callback_data="list_news")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="update_all_news")],
        [InlineKeyboardButton(text="üõ†–í –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# --- –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é ---
@admin_news_router.message(Command('edit_news'))
async def admin_news_menu(message: Message):
    await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏:", reply_markup=get_admin_news_kb())

@admin_news_router.callback_query(F.data == 'edit_news_panel')
async def admin_events_menu(callback: CallbackQuery):
    await callback.message.edit_text("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏:", reply_markup=get_admin_news_kb())

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ---
@admin_news_router.callback_query(F.data == "add_news")
async def add_news_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddNewsFSM.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:")

@admin_news_router.message(AddNewsFSM.name)
async def add_news_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddNewsFSM.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:")

@admin_news_router.message(AddNewsFSM.description)
async def add_news_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddNewsFSM.img)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):")

@admin_news_router.message(AddNewsFSM.img)
async def add_news_img(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    img = None if message.text == "-" else message.text
    await state.update_data(img=img)
    data = await state.get_data()
    await orm_add_news(session, data)
    await state.set_state(AddNewsFSM.notify)
    await message.answer(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n–•–æ—Ç–∏—Ç–µ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?(–î–∞/–Ω–µ—Ç)")

@admin_news_router.message(AddNewsFSM.notify)
async def add_news_anounse(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    anouncement = True if message.text.lower() in ['yes', '–¥–∞', 1] else False
    if anouncement:
        data = await state.get_data()
        text = f"üì∞ –ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å!\n\n<b>{data['name']}</b>\n\n{data['description'][:300]}..."
        await notify_subscribers(bot, session, f"üì∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö! \n\n{text}", data['img'], type_="news")
        await message.answer('üëç–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', reply_markup=get_admin_news_kb())
    else:
        await message.answer('üëç–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –±–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', reply_markup=get_admin_news_kb())
    await state.clear()


# --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ---
@admin_news_router.callback_query(F.data == "edit_news")
async def edit_news_start(callback: CallbackQuery, session: AsyncSession):
    news = await orm_get_all_news(session)
    if not news:
        await callback.message.answer("‚ùå –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=n.name, callback_data=f"edit_news_{n.id}")] for n in news
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å:", reply_markup=kb)

@admin_news_router.callback_query(F.data.startswith("edit_news_"))
async def edit_news_choose(callback: CallbackQuery, state: FSMContext):
    news_id = int(callback.data.split("_")[2])
    await state.update_data(id=news_id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="field_name")],
        [InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="field_description")],
        [InlineKeyboardButton(text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="field_img")],
    ])
    await state.set_state(EditNewsFSM.field)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=kb)

@admin_news_router.callback_query(F.data.startswith("field_"), EditNewsFSM.field)
async def edit_news_field(callback: CallbackQuery, state: FSMContext):
    field = callback.data.replace("field_", "")
    await state.update_data(field=field)
    await state.set_state(EditNewsFSM.value)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è {field}:")

@admin_news_router.message(EditNewsFSM.value)
async def edit_news_value(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    await orm_update_news(session, data["id"], {data["field"]: message.text})
    await state.clear()
    await message.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞!", reply_markup=get_admin_news_kb())


# --- –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ---
@admin_news_router.callback_query(F.data == "delete_news")
async def delete_news_start(callback: CallbackQuery, session: AsyncSession):
    news = await orm_get_all_news(session)
    if not news:
        await callback.message.answer("‚ùå –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=n.name, callback_data=f"delete_news_{n.id}")] for n in news
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å:", reply_markup=kb)

@admin_news_router.callback_query(F.data.startswith("delete_news_"))
async def delete_news_confirm(callback: CallbackQuery, session: AsyncSession):
    news_id = int(callback.data.split("_")[2])
    await orm_delete_news(session, news_id)
    await callback.message.answer("üóë –ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞!", reply_markup=get_admin_news_kb())



# --- –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ ---
@admin_news_router.callback_query(F.data == "update_all_news")
async def update_all_news_handler_(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    question_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="C –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data=f"update_all_news_True")],
        [InlineKeyboardButton(text="–ë–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data=f"update_all_news_False")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"edit_news_panel")]

    ])
    await callback.message.answer("–û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?",  reply_markup=question_kb)
@admin_news_router.callback_query(F.data.startswith("update_all_news_"))
async def update_all_news_handler(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    try:
        update = (callback.data.split('_')[3] == str(True))
    except:
        update = False
    await callback.message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ~1 –º–∏–Ω—É—Ç–∞")
    try:
        data, log_text = await asyncio.to_thread(update_all_news)
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return

    updated, added = 0, 0
    for name, values in data.items():
        try:
            description, img = values
        except ValueError:
            await callback.message.answer(f"‚ö† –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {name}")
            continue

        news = await orm_query.orm_get_news_by_name(session, name)
        if news:
            await orm_update_news(session, news.id, {
                "description": description,
                "img": img,
            })
            updated += 1
        else:
            await orm_add_news(session, {
                "name": name,
                "description": description,
                "img": img,
            })
            added += 1
            if update:
                text = f"{name.capitalize()}"
                await notify_subscribers(bot, session, f"üì∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö! \n\n{text}", img, type_="news")
    await callback.message.answer(
        f"{log_text}\n\n"
        f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}\n"
        f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}",
        reply_markup=get_admin_news_kb()
    )