from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from aiogram.filters import Command, or_f
from aiogram import Router, types, F, Bot
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete

from filter.filter import ChatTypeFilter, IsAdmin, IsEditor, check_user, get_user_role

from data.text import admin_welcome
from database.models import Admin
from filter.filter import IsSuperAdmin
from handlers.notification import send_event_reminders, logger, notify_all_users
from logic.cmd_list import private

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext


admin_router = Router()
admin_router.message.filter(ChatTypeFilter(['private']),IsAdmin())


admin_manage_router = Router()
admin_manage_router.message.filter(or_f(IsSuperAdmin(),IsEditor()))

@admin_manage_router.message(Command('check'))
async def check_(message: types.Message, bot: Bot, session: AsyncSession):
    if await IsSuperAdmin()(message, bot=bot):
        await message.answer("–í—ã —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω")
    elif await IsEditor()(message, session=session):
        await message.answer("–í—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä")
    else:
        await message.answer("–í—ã –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")


async def admin_panel_menu(user: types.User, bot: Bot, new_session: AsyncSession):
    role = await get_user_role(user.id, new_session)

    buttons = [
        [InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ê—Ñ–∏—à—É', callback_data="edit_events_panel")],
        [InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –°—Ç—É–¥–∏–∏', callback_data="edit_studios_panel")],
        [InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ù–æ–≤–æ—Å—Ç–∏', callback_data="edit_news_panel")]
    ]

    if role == 'super_admin':
        buttons.append([InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', callback_data="manage_editors")])
        buttons.append([InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º!üì¢", callback_data='notify_all_start')])

    buttons.append([InlineKeyboardButton(text="üè† –í –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@admin_manage_router.message(Command('admin'))
async def admin_panel(message: types.Message, bot: Bot, session: AsyncSession):
    await message.answer(f'{admin_welcome}', reply_markup=await admin_panel_menu(message.from_user, bot, session))


@admin_manage_router.callback_query(F.data == 'admin_panel')
async def admin_menu2(callback : CallbackQuery, bot: Bot, session: AsyncSession):
    await callback.message.edit_text(admin_welcome, reply_markup=await admin_panel_menu(callback.from_user, bot, session))




@admin_router.callback_query(F.data == "manage_editors")
async def manage_editors(callback: CallbackQuery, session: AsyncSession):
    editors = (await session.execute(select(Admin))).scalars().all()
    text = "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞–º–∏:\n\n"
    for ed in editors:
        text += f"‚Ä¢ {ed.user_id} ({ed.role})\n"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞", callback_data="add_editor")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞", callback_data="remove_editor")],
        [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])
    await callback.message.edit_text(text, reply_markup=kb)


class EditorFSM(StatesGroup):
    add_id = State()
    remove_id = State()


@admin_router.callback_query(F.data == "add_editor")
async def add_editor(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º.")
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM (–Ω–∞–¥–æ –∑–∞–≤–µ—Å—Ç–∏ —Å—Ç–µ–π—Ç-–º–∞—à–∏–Ω—É)
    await state.set_state(EditorFSM.add_id)


@admin_router.callback_query(F.data == "remove_editor")
async def remove_editor(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤.")
    # —Ç–æ–∂–µ FSM
    await state.set_state(EditorFSM.remove_id)


@admin_router.message(EditorFSM.add_id)
async def editor_add_handler(message: types.Message, state: FSMContext, session: AsyncSession):
    try:
        user_id = int(message.text)
        session.add(Admin(user_id=user_id, role="editor"))
        await session.commit()
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await state.clear()



@admin_router.message(EditorFSM.remove_id)
async def editor_remove_handler(message: types.Message, state: FSMContext, session: AsyncSession):
    try:
        user_id = int(message.text)
        await session.execute(delete(Admin).where(Admin.user_id == user_id))
        await session.commit()
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await state.clear()



@admin_router.message(Command('set_menu'))
async def set_menu(message: types.Message, bot: Bot):
    await bot.set_my_commands(commands=private, scope=types.BotCommandScopeAllPrivateChats())


@admin_router.message(Command('send_reminders'))
async def send_reminders(message: types.Message, session: AsyncSession, bot: Bot):
    await send_event_reminders(bot, session)
    await message.answer("–¢–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")


class NotifyAll(StatesGroup):
    text = State()
    choose_img = State()
    img = State()
    confirm = State()


@admin_router.message(Command("notify_all_users"))
async def send_reminders(message: types.Message):
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="notify_all_start")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="main_menu")]
        ])
    )

@admin_router.callback_query(F.data == "notify_all_start")
async def notify_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(NotifyAll.text)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
    await callback.answer()


@admin_router.message(NotifyAll.text)
async def notify_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await state.set_state(NotifyAll.choose_img)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="notify_add_img")],
        [InlineKeyboardButton(text="‚ùå –ë–µ–∑ —Ñ–æ—Ç–æ", callback_data="notify_no_img")]
    ])

    await message.answer("–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ?", reply_markup=kb)


@admin_router.callback_query(F.data == "notify_add_img")
async def notify_add_img(callback: CallbackQuery, state: FSMContext):
    await state.set_state(NotifyAll.img)
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É (URL) –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")
    await callback.answer()


@admin_router.callback_query(F.data == "notify_no_img")
async def notify_no_img(callback: CallbackQuery, state: FSMContext):
    await state.update_data(img=None)
    await show_preview(callback.message, state)
    await callback.answer()


@admin_router.message(NotifyAll.img)
async def notify_img(message: types.Message, state: FSMContext):
    await state.update_data(img=message.text)
    await show_preview(message, state)


async def show_preview(message_or_callback, state: FSMContext):
    data = await state.get_data()
    text = data["text"]
    img = data.get("img")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="notify_confirm")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="notify_all_start")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")]
    ])
    try:
        if img:
            await message_or_callback.answer_photo(img, caption=f"{text}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=kb)
        else:
            await message_or_callback.answer(f"{text}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=kb)
    except Exception as e:
        logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å : {e}")
        await message_or_callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="notify_all_start")],
            [InlineKeyboardButton(text="üè† –í –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]))
    await state.set_state(NotifyAll.confirm)


@admin_router.callback_query(F.data == "notify_confirm")
async def notify_confirm(callback: CallbackQuery, state: FSMContext, bot: Bot, session: AsyncSession):
    data = await state.get_data()
    await state.clear()

    text = data["text"]
    img = data.get("img")

    # await broadcast_to_all_users(bot, session, text, img)
    await notify_all_users(bot, session, text, img)

    await callback.message.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    await callback.answer()


