from aiogram import Router, F, types
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func

from database.models import Studios
from database.orm_query import orm_get_studio


studios_router = Router()

STUDIOS_PER_PAGE = 8

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def get_studios_keyboard(studios, page: int, total_pages: int):
    keyboard = [
        [InlineKeyboardButton(
            text=f"{'üÜì' if studio.cost == 0 else 'üí≥'} {studio.name.capitalize()}",
            callback_data=f"studio_card:{studio.id}:{page}"
        )]
        for studio in studios
    ]

    nav_buttons = []
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(text="‚èÆ –ù–∞–∑–∞–¥", callback_data=f"studios_page:{page-1}")
        )
    if page < total_pages:
        nav_buttons.append(
            InlineKeyboardButton(text="‚è≠ –î–∞–ª–µ–µ", callback_data=f"studios_page:{page+1}")
        )
    if nav_buttons:
        keyboard.append(nav_buttons)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_studio_card_keyboard(studio_id: int, page: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"studios_page:{page}")],
        [InlineKeyboardButton(text="‚Ñπ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"studio_detail:{studio_id}:{page}")]
    ])


def get_studio_detail_keyboard(studio: Studios, page: int):
    buttons = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"studio_card:{studio.id}:{page}")]]
    link = 'https://–¥–∫-—è—É–∑–∞.—Ä—Ñ/studii/'
    link2 = 'https://dk.mosreg.ru/'
    buttons.append([InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=link)])
    buttons.append([InlineKeyboardButton(text="üñç –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∫—Ä—É–∂–æ–∫", url=link2)]
                   )
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# ---------- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------
async def render_studio_list(message_or_callback, session: AsyncSession, page: int = 1):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–∏–π"""
    offset = (page - 1) * STUDIOS_PER_PAGE
    studios = (
        await session.execute(
            select(Studios).offset(offset).limit(STUDIOS_PER_PAGE)
        )
    ).scalars().all()

    total = (await session.execute(select(func.count(Studios.id)))).scalar_one()
    total_pages = (total + STUDIOS_PER_PAGE - 1) // STUDIOS_PER_PAGE

    text = "üìã <b>–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–∏–π:</b>\n\n"
    keyboard = get_studios_keyboard(studios, page, total_pages)

    target = message_or_callback.message if isinstance(message_or_callback, CallbackQuery) else message_or_callback

    if not studios:
        if isinstance(message_or_callback, CallbackQuery):
            await message_or_callback.message.delete()  # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            await message_or_callback.message.answer("‚ùå–°—Ç—É–¥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            await message_or_callback.answer("‚ùå–°—Ç—É–¥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    try:
        if target.text:
            await target.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        else:
            await target.delete()
            await target.answer(text, reply_markup=keyboard, parse_mode="HTML")
    except Exception:
        await target.answer(text, reply_markup=keyboard, parse_mode="HTML")

    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.answer()


async def render_studio_card(message_or_callback, studio: Studios, page: int):
    """–ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç—É–¥–∏–∏ (–∫—Ä–∞—Ç–∫–∞—è)"""
    description = studio.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
    short_desc = description[:500] + ("‚Ä¶" if len(description) > 500 else "")

    text = f"<b>{studio.name}</b>\n\n{short_desc}"
    kb = get_studio_card_keyboard(studio.id, page)

    target = message_or_callback.message if isinstance(message_or_callback, CallbackQuery) else message_or_callback

    try:
        if studio.img:
            if target.photo:
                await target.edit_caption(caption=text[:1024], reply_markup=kb, parse_mode="HTML")
            else:
                await target.delete()
                await target.answer_photo(studio.img, caption=text[:1024], reply_markup=kb, parse_mode="HTML")
        else:
            if target.text:
                await target.edit_text(text[:4095], reply_markup=kb, parse_mode="HTML")
            else:
                await target.delete()
                await target.answer(text[:4095], reply_markup=kb, parse_mode="HTML")
    except Exception:
        await target.answer(text[:4095], reply_markup=kb, parse_mode="HTML")

    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.answer()


async def render_studio_detail(message_or_callback, studio: Studios, page: int):
    """–ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç—É–¥–∏–∏"""
    text = (
        f"<b>{studio.name}</b>\n\n"
        f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {studio.teacher or '‚Äî'}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {studio.cost} —Ä—É–±.\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {studio.age}\n"
        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {studio.category}\n"
        f"‚è± –û–±–Ω–æ–≤–ª–µ–Ω–æ: {studio.updated}\n\n"
        f"‚ÑπÔ∏è {studio.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
    )
    kb = get_studio_detail_keyboard(studio, page)

    target = message_or_callback.message if isinstance(message_or_callback, CallbackQuery) else message_or_callback

    try:
        if studio.img:
            if target.photo:
                await target.edit_caption(caption=text[:1024], reply_markup=kb, parse_mode="HTML")
            else:
                await target.delete()
                await target.answer_photo(studio.img, caption=text[:1024], reply_markup=kb, parse_mode="HTML")
        else:
            if target.text:
                await target.edit_text(text[:4095], reply_markup=kb, parse_mode="HTML")
            else:
                await target.delete()
                await target.answer(text[:4095], reply_markup=kb, parse_mode="HTML")
    except Exception:
        await target.answer(text[:4095], reply_markup=kb, parse_mode="HTML")

    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.answer()


# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------
@studios_router.callback_query(F.data == "list_studios")
async def list_studios_handler(callback: CallbackQuery, session: AsyncSession):
    await render_studio_list(callback, session, page=1)


@studios_router.callback_query(F.data.startswith("studios_page:"))
async def studios_page_handler(callback: CallbackQuery, session: AsyncSession):
    page = int(callback.data.split(":")[1])
    await render_studio_list(callback, session, page)


@studios_router.callback_query(F.data.startswith("studio_card:"))
async def studio_card_handler(callback: CallbackQuery, session: AsyncSession):
    studio_id, page = map(int, callback.data.split(":")[1:])
    studio = await orm_get_studio(session, studio_id)
    if not studio:
        await callback.answer("–°—Ç—É–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    await render_studio_card(callback, studio, page)


@studios_router.callback_query(F.data.startswith("studio_detail:"))
async def studio_detail_handler(callback: CallbackQuery, session: AsyncSession):
    studio_id, page = map(int, callback.data.split(":")[1:])
    studio = await orm_get_studio(session, studio_id)
    if not studio:
        await callback.answer("–°—Ç—É–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    await render_studio_detail(callback, studio, page)
