import logging
import json

from aiogram import Router, types, F, Bot
from aiogram.filters import Command, or_f
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete

from filter.filter import ChatTypeFilter, IsAdmin, IsEditor, IsSuperAdmin, get_user_role
from database.models import Admin, Users
from handlers.notification import send_event_reminders, notify_all_users
from logic.cmd_list import private
from logic.helper import load_texts, save_texts, get_text


# ================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==================

logger = logging.getLogger(__name__)

# ================== –†–û–£–¢–ï–†–´ ==================


admin_router = Router()
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())

admin_manage_router = Router()
admin_manage_router.message.filter(or_f(IsSuperAdmin(), IsEditor()))


# --- Role check ---
@admin_manage_router.message(Command("check"))
async def check_(message: types.Message, bot: Bot, session: AsyncSession):
    try:
        if await IsSuperAdmin()(message, bot=bot):
            role = "super_admin"
        elif await IsEditor()(message, session=session):
            role = "editor"
        else:
            role = "user"

        logger.info(f"User {message.from_user.id} checked role: {role}")
        await message.answer(f"–í–∞—à–∞ —Ä–æ–ª—å: {role}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–ª–∏.")


# --- Admin panel menu ---
async def admin_panel_menu(user: types.User, bot: Bot, session: AsyncSession) -> InlineKeyboardMarkup:
    role = await get_user_role(user.id, session)

    buttons = [
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ê—Ñ–∏—à—É", callback_data="edit_events_panel")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –°—Ç—É–¥–∏–∏", callback_data="edit_studios_panel")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ù–æ–≤–æ—Å—Ç–∏", callback_data="edit_news_panel")],
    ]

    if role == "super_admin":
        buttons.append([InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="manage_editors")])
        buttons.append([InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–∫–ª–∞–¥–æ–∫", callback_data="change_fields")])
        buttons.append([InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º!üì¢", callback_data="notify_all_start")])

    buttons.append([InlineKeyboardButton(text="üè† –í –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@admin_manage_router.message(Command("admin"))
async def admin_panel(message: types.Message, bot: Bot, session: AsyncSession):
    logger.info(f"User {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    await message.answer(get_text("admin_welcome"), reply_markup=await admin_panel_menu(message.from_user, bot, session))


@admin_manage_router.callback_query(F.data == "admin_panel")
async def admin_menu_callback(callback: CallbackQuery, bot: Bot, session: AsyncSession):
    logger.info(f"User {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    await callback.message.edit_text(get_text("admin_welcome"), reply_markup=await admin_panel_menu(callback.from_user, bot, session))


# --- Manage editors ---
@admin_router.callback_query(F.data == "manage_editors")
async def manage_editors(callback: CallbackQuery, session: AsyncSession):
    editors = (await session.execute(select(Admin))).scalars().all()
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(editors)} —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤")

    text = "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞–º–∏:\n\n"
    for ed in editors:
        user = await session.get(Users, ed.user_id)
        if user:
            name_parts = [n for n in [user.first_name, user.last_name] if n]
            full_name = " ".join(name_parts) if name_parts else "‚Äî"
            username = f"@{user.username}" if user.username else ""
            display = f"{full_name} {username}".strip()
        else:
            display = "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤ Users"
        text += f"‚Ä¢ {ed.user_id} ({ed.role}) ‚Äî {display}\n"

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞", callback_data="add_editor")],
            [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞", callback_data="remove_editor")],
            [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="admin_panel")],
        ]
    )
    await callback.message.edit_text(text, reply_markup=kb)


class EditorFSM(StatesGroup):
    add_id = State()
    remove_id = State()


@admin_router.callback_query(F.data == "add_editor")
async def add_editor(callback: CallbackQuery, state: FSMContext):
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞")
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º.")
    await state.set_state(EditorFSM.add_id)


@admin_router.callback_query(F.data == "remove_editor")
async def remove_editor(callback: CallbackQuery, state: FSMContext):
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞")
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤.")
    await state.set_state(EditorFSM.remove_id)


@admin_router.message(EditorFSM.add_id)
async def editor_add_handler(message: types.Message, state: FSMContext, session: AsyncSession):
    try:
        user_id = int(message.text)
        session.add(Admin(user_id=user_id, role="editor"))
        await session.commit()
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä {user_id}")
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ {message.text}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await state.clear()


@admin_router.message(EditorFSM.remove_id)
async def editor_remove_handler(message: types.Message, state: FSMContext, session: AsyncSession):
    try:
        user_id = int(message.text)
        await session.execute(delete(Admin).where(Admin.user_id == user_id))
        await session.commit()
        logger.debug(f"–†–µ–¥–∞–∫—Ç–æ—Ä {user_id} —É–¥–∞–ª—ë–Ω")
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ {message.text}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await state.clear()


# --- Bot menu setup ---
@admin_router.message(Command("set_menu"))
async def set_menu(message: types.Message, bot: Bot):
    logger.info(f"User {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –º–µ–Ω—é –∫–æ–º–∞–Ω–¥")
    await bot.set_my_commands(commands=private, scope=types.BotCommandScopeAllPrivateChats())
    await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ï—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å, –æ—á–∏—Å—Ç–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —Å –±–æ—Ç–æ–º.")


# --- Event reminders ---
@admin_router.message(Command("send_reminders"))
async def send_reminders(message: types.Message, session: AsyncSession, bot: Bot):
    logger.info(f"User {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    await send_event_reminders(bot, session)
    await message.answer("–¢–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")


# --- Notify all users ---
class NotifyAll(StatesGroup):
    text = State()
    choose_img = State()
    img = State()
    confirm = State()


@admin_router.message(Command("notify_all_users"))
async def notify_all_cmd(message: types.Message):
    logger.info(f"User {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É")
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞", callback_data="notify_all_start")],
                [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="main_menu")],
            ]
        ),
    )


@admin_router.callback_query(F.data == "notify_all_start")
async def notify_start(callback: CallbackQuery, state: FSMContext):
    logger.debug(f"User {callback.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
    await state.set_state(NotifyAll.text)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
    await callback.answer()


@admin_router.message(NotifyAll.text)
async def notify_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await state.set_state(NotifyAll.choose_img)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="notify_add_img")],
            [InlineKeyboardButton(text="‚ùå –ë–µ–∑ —Ñ–æ—Ç–æ", callback_data="notify_no_img")],
        ]
    )

    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–¥–∞–ª —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
    await message.answer("–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ?", reply_markup=kb)


@admin_router.callback_query(F.data == "notify_add_img")
async def notify_add_img(callback: CallbackQuery, state: FSMContext):
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç —Ñ–æ—Ç–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ")
    await state.set_state(NotifyAll.img)
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É (URL) –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")
    await callback.answer()


@admin_router.callback_query(F.data == "notify_no_img")
async def notify_no_img(callback: CallbackQuery, state: FSMContext):
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É –±–µ–∑ —Ñ–æ—Ç–æ")
    await state.update_data(img=None)
    await show_preview(callback.message, state)
    await callback.answer()


@admin_router.message(NotifyAll.img)
async def notify_img(message: types.Message, state: FSMContext):
    await state.update_data(img=message.text)
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –¥–æ–±–∞–≤–∏–ª —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
    await show_preview(message, state)


async def show_preview(message_or_callback, state: FSMContext):
    data = await state.get_data()
    text = data["text"]
    img = data.get("img")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="notify_confirm")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="notify_all_start")],
            [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")],
        ]
    )
    try:
        if img:
            await message_or_callback.answer_photo(img, caption=f"{text}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=kb)
            logger.debug("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            await message_or_callback.answer(f"{text}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=kb)
            logger.debug("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏ –±–µ–∑ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: {e}")
        await message_or_callback.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="notify_all_start")],
                    [InlineKeyboardButton(text="üè† –í –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
                ]
            ),
        )
    await state.set_state(NotifyAll.confirm)


@admin_router.callback_query(F.data == "notify_confirm")
async def notify_confirm(callback: CallbackQuery, state: FSMContext, bot: Bot, session: AsyncSession):
    data = await state.get_data()
    await state.clear()

    text = data["text"]
    img = data.get("img")

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É")
    await notify_all_users(bot, session, text, img)
    await callback.message.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    await callback.answer()


#–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class EditText(StatesGroup):
    choosing_key = State()
    editing_value = State()


@admin_router.callback_query(F.data == "change_fields")
async def change_fields(callback: CallbackQuery, state: FSMContext):
    texts = load_texts()
    kb = InlineKeyboardBuilder()
    for key in texts.keys():
        kb.button(text=key, callback_data=f"edit_text:{key}")
    kb.button(text="üõ† –í –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")
    kb.adjust(1)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb.as_markup())
    await state.set_state(EditText.choosing_key)


# –í—ã–±–æ—Ä –∫–ª—é—á–∞
@admin_router.callback_query(F.data.startswith("edit_text:"))
async def choose_text_key(callback: CallbackQuery, state: FSMContext):
    key = callback.data.split(":")[1]
    texts = load_texts()
    current = texts.get(key, "")
    await state.update_data(key=key)
    await callback.message.answer(f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è <b>{key}</b>:\n\n{current}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:")
    await state.set_state(EditText.editing_value)

# –ü—Ä–∏—ë–º –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
@admin_router.message(EditText.editing_value)
async def receive_new_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    key = data["key"]
    texts = load_texts()
    texts[key] = message.text
    save_texts(texts)
    await message.answer(f"‚úÖ –¢–µ–∫—Å—Ç –¥–ª—è <b>{key}</b> –æ–±–Ω–æ–≤–ª—ë–Ω.",
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥",callback_data="change_fields")]]))
    await state.clear()