from aiogram import Router, types, F
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from database.models import Users

from datetime import datetime, timedelta
from database.models import Events, UserEventTracking
from filter.filter import ChatTypeFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from database.orm_query import orm_get_user, orm_update_user_subscription, orm_get_subscribers

notificate_router = Router()
notificate_router.message.filter(ChatTypeFilter(["private"]))


def get_subscriptions_kb(user):
    buttons = []

    # –ù–æ–≤–æ—Å—Ç–∏
    if user.news_subscribed:
        buttons.append([InlineKeyboardButton(text="‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="unsub_news")])
    else:
        buttons.append([InlineKeyboardButton(text="‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="sub_news")])

    # –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    if user.events_subscribed:
        buttons.append([InlineKeyboardButton(text="‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∞—Ñ–∏—à—É", callback_data="unsub_events")])
    else:
        buttons.append([InlineKeyboardButton(text="‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∞—Ñ–∏—à—É", callback_data="sub_events")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


@notificate_router.message(F.text == "üîî –ü–æ–¥–ø–∏—Å–∫–∏")
async def show_subscriptions(message: types.Message, session: AsyncSession):
    user = await orm_get_user(session, message.from_user.id)
    text = f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å, –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å, –∞ —Ç–∞–∫–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=get_subscriptions_kb(user))


@notificate_router.callback_query(F.data.in_(["sub_news", "unsub_news", "sub_events", "unsub_events"]))
async def toggle_subscription(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id

    if callback.data == "sub_news":
        await orm_update_user_subscription(session, user_id, news=True)
        text = "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!"
    elif callback.data == "unsub_news":
        await orm_update_user_subscription(session, user_id, news=False)
        text = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞."
    elif callback.data == "sub_events":
        await orm_update_user_subscription(session, user_id, events=True)
        text = "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!"
    else:
        await orm_update_user_subscription(session, user_id, events=False)
        text = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."

    user = await orm_get_user(session, user_id)
    await callback.message.edit_reply_markup(reply_markup=get_subscriptions_kb(user))
    await callback.answer(text)

async def notify_subscribers(bot, session, text: str, img: str | None = None, type_: str = "news"):
    """
    –†–∞—Å—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –æ –Ω–æ–≤–æ—Å—Ç—è—Ö –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è—Ö.
    :param bot: —ç–∫–∑–µ–º–ø–ª—è—Ä aiogram.Bot
    :param session: AsyncSession
    :param text: —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    :param img: (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ
    :param type_: "news" –∏–ª–∏ "event"
    """
    if type_ == "news":
        filter_field = Users.news_subscribed
    else:
        filter_field = Users.events_subscribed

    result = await session.execute(select(Users.user_id).where(filter_field == True))
    subscribers = result.scalars().all()

    for user_id in subscribers:
        try:
            if img:
                await bot.send_photo(user_id, img, caption=text[:1024], parse_mode="HTML")
            else:
                await bot.send_message(user_id, text[:4096], parse_mode="HTML")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def send_event_reminders(bot, session):
    now = datetime.now().date()

    # –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è –∏–ª–∏ —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å
    result = await session.execute(
        select(Events)
        .where(Events.date.in_([now + timedelta(days=3), now + timedelta(days=1)]))
    )
    events = result.scalars().all()

    for event in events:
        # –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
        tracking_users = await session.execute(
            select(UserEventTracking.user_id).where(UserEventTracking.event_id == event.id)
        )
        user_ids = tracking_users.scalars().all()

        text = (
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
            f"–ß–µ—Ä–µ–∑ {'3 –¥–Ω—è' if event.date.date() == now + timedelta(days=3) else '1 –¥–µ–Ω—å'} —Å–æ—Å—Ç–æ–∏—Ç—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n\n"
            f"<b>{event.name}</b>\n"
            f"üóì {event.date:%d.%m.%Y}\n\n"
            f"{event.description[:200]}..."
        )

        for user_id in user_ids:
            try:
                if event.img:
                    await bot.send_photo(user_id, event.img, caption=text, parse_mode="HTML")
                else:
                    await bot.send_message(user_id, text, parse_mode="HTML")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {user_id}: {e}")