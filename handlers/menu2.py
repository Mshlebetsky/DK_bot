import logging
from aiogram import types, Router, F, Bot
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_query import orm_get_user, orm_add_user, orm_last_seen_time_user
from filter.filter import ChatTypeFilter, get_user_role
from data.text import contact, help
from handlers.Event_list import render_event_list
from handlers.News_list import render_all_news
from handlers.Servi—Åes import get_services_keyboard
# from handlers.Studio_list import render_studio_list
from handlers.notification import get_subscriptions_kb

# ================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==================

logger = logging.getLogger(__name__)

# ================== –†–û–£–¢–ï–† ==================


menu2_router = Router()
menu2_router.message.filter(ChatTypeFilter(["private"]))


# ---------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ----------
async def get_main_menu_kb(user: types.User, session: AsyncSession) -> InlineKeyboardMarkup:
    role = await get_user_role(user.id, session)
    buttons = [
        [
            InlineKeyboardButton(text="üìÜ –ê—Ñ–∏—à–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data="events"),
            InlineKeyboardButton(text="üíÉ –°—Ç—É–¥–∏–∏", callback_data="studios"),
        ],
        [
            InlineKeyboardButton(text="üóû –ù–æ–≤–æ—Å—Ç–∏", callback_data="list_news"),
            InlineKeyboardButton(text="üñç –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="notifications_"),
        ],
        [
            InlineKeyboardButton(text="üíº –£—Å–ª—É–≥–∏", callback_data="services"),
            InlineKeyboardButton(text="üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
        ],
        [InlineKeyboardButton(text="–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫—Ä—É–∂–∫–æ–≤", url="http://uslugi.mosreg.ru")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–º–æ—â—å", callback_data="help")],
    ]
    if role != "user":
        buttons.append([InlineKeyboardButton(text="üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def render_main_menu(target: types.Message | CallbackQuery, session: AsyncSession):
    """–†–µ–Ω–¥–µ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    text = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

    if isinstance(target, (types.Message, CallbackQuery)):
        user = target.from_user
    else:
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞: %s", type(target))
        return
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        await orm_add_user(
            session,
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é {e}")
        pass
    try:
        await orm_last_seen_time_user(session, user.id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {e}")
        pass
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (%s) –≤–æ—à–µ–ª –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", user.id, user.username)

    kb = await get_main_menu_kb(user, session)

    if isinstance(target, CallbackQuery):
        try:
            try:
                await target.message.edit_text(text, reply_markup=kb)
            except:
                pass
        except Exception as e:
            # logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", e)
            await target.message.delete()
            await target.message.answer(text, reply_markup=kb)
        await target.answer()

    elif isinstance(target, types.Message):
        await target.answer(text, reply_markup=kb)


@menu2_router.message(Command("menu"))
async def menu2_(message: types.Message, session: AsyncSession):
    await render_main_menu(message, session)


# ---------- –ü–æ–º–æ—â—å ----------
@menu2_router.callback_query(F.data == "help")
async def help_callback(callback: CallbackQuery, session: AsyncSession):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å", callback.from_user.id)
    try:
        await callback.message.edit_text(help, reply_markup=await get_main_menu_kb(callback.from_user, session))
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å help (callback): %s", e)


@menu2_router.message(Command("help"))
async def help_command(message: types.Message, session: AsyncSession):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /help", message.from_user.id)
    try:
        await message.answer(help, reply_markup=await get_main_menu_kb(message.from_user, session))
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å help (command): %s", e)


# ---------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–Ω–∞–∑–∞–¥) ----------
@menu2_router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery, bot: Bot, state: FSMContext, session: AsyncSession):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–∫–∞—Ü–∏–µ–π
    data = await state.get_data()
    location_msg_id = data.get("location_msg_id")
    if location_msg_id:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=location_msg_id)
            logger.info("–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–∫–∞—Ü–∏–µ–π %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", location_msg_id, callback.from_user.id)
        except Exception as e:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–∫–∞—Ü–∏–µ–π %s: %s", location_msg_id, e)

        await state.update_data(location_msg_id=None)

    await render_main_menu(callback, session)


# ---------- –ö–æ–Ω—Ç–∞–∫—Ç—ã ----------
@menu2_router.callback_query(F.data == "contacts")
async def contacts_callback(callback: CallbackQuery, state: FSMContext):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback.from_user.id)

    contact_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="Tg", url="https://t.me/mdkjauza"),
                InlineKeyboardButton(text="VK", url="https://vk.com/mdkjauza"),
            ],
            [InlineKeyboardButton(text="üè† –í –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë id –≤ FSM
    location_msg = await callback.message.answer_location(55.908752, 37.743256)
    await state.update_data(location_msg_id=location_msg.message_id)
    logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–∫–∞—Ü–∏–µ–π %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", location_msg.message_id, callback.from_user.id)

    await callback.message.edit_text(contact, reply_markup=contact_kb)


@menu2_router.message(Command("contact"))
async def contacts_command(message: types.Message, state: FSMContext):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /contact", message.from_user.id)

    contact_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="Tg", url="https://t.me/mdkjauza"),
                InlineKeyboardButton(text="VK", url="https://vk.com/mdkjauza"),
            ],
            [InlineKeyboardButton(text="üè† –í –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
    )
    await message.answer(contact, reply_markup=contact_kb)

    location_msg = await message.answer_location(55.908752, 37.743256)
    await state.update_data(location_msg_id=location_msg.message_id)
    logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–∫–∞—Ü–∏–µ–π %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", location_msg.message_id, message.from_user.id)


# ---------- –£—Å–ª—É–≥–∏ ----------
@menu2_router.callback_query(F.data == "services")
async def services_callback(callback: CallbackQuery):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–∫—Ä—ã–ª —Ä–∞–∑–¥–µ–ª —É—Å–ª—É–≥–∏", callback.from_user.id)
    await callback.message.edit_text("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", reply_markup=get_services_keyboard())


# ---------- –ù–æ–≤–æ—Å—Ç–∏ ----------
@menu2_router.message(Command("news"))
async def news_command(message: types.Message, session: AsyncSession):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /news", message.from_user.id)
    await render_all_news(message, session)


# ---------- –ü–æ–¥–ø–∏—Å–∫–∏ ----------
@menu2_router.message(Command("notification"))
async def notification_command(message: types.Message, session: AsyncSession):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /notification", message.from_user.id)

    await orm_add_user(
        session,
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    user = await orm_get_user(session, message.from_user.id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=get_subscriptions_kb(user))




# # ---------- –ê—Ñ–∏—à–∞ ----------
# @menu2_router.message(Command("events"))
# async def events_command(message: types.Message, session: AsyncSession):
#     logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /events", message.from_user.id)
#     await render_event_list(message, session, page=1)