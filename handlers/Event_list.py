import logging
from datetime import date, datetime
from typing import Sequence

from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, delete

from database.models import Events, UserEventTracking
from database.orm_query import orm_get_event

# ================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==================

logger = logging.getLogger(__name__)

# ================== –†–û–£–¢–ï–† ==================

event_router = Router()


EVENTS_PER_PAGE = 8


# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------

def capitalize_title_safe(s: str) -> str:
    """–î–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –∫–∞–≤—ã—á–∫–∏ –∏ —ë–ª–æ—á–∫–∏."""
    if not s:
        return s
    if s[0] in {"¬´", "\""} and len(s) > 1:
        return f"{s[0]}{s[1:].capitalize()}"
    return s.capitalize()


async def safe_edit_message(message: Message, text: str, kb: InlineKeyboardMarkup | None = None) -> None:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
    - –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ ‚Üí edit_text
    - –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ/–¥—Ä—É–≥–æ–µ ‚Üí delete + answer
    - –∑–∞—â–∏—Ç–∞ –æ—Ç "message is not modified"
    """
    try:
        if message.content_type == "text":
            await message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        else:
            await message.delete()
            await message.answer(text, reply_markup=kb, parse_mode="HTML")
    except Exception as e:
        if "message is not modified" in str(e):
            logger.debug("safe_edit_message: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
        else:
            logger.warning(f"safe_edit_message error: {e}")


# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------

def get_events_keyboard(events: Sequence[Events], page: int, total_pages: int) -> InlineKeyboardMarkup:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π."""
    keyboard = [
        [InlineKeyboardButton(
            text=f"üóì {ev.date:%d.%m} | {capitalize_title_safe(ev.name[:30])} | {ev.age_limits}+",
            callback_data=f"event_card:{ev.id}:{page}"
        )]
        for ev in events
    ]

    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚èÆ –ù–∞–∑–∞–¥", callback_data=f"events_page:{page-1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="‚è≠ –î–∞–ª–µ–µ", callback_data=f"events_page:{page+1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)
    keyboard.append([InlineKeyboardButton(text="üè† –í –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_event_base_buttons(event: Events) -> list[list[InlineKeyboardButton]]:
    """–ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏—è."""
    buttons = [[InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://–¥–∫-—è—É–∑–∞.—Ä—Ñ/afisha/")]]
    if (
        event.link and isinstance(event.link, str) and event.link.startswith("http")
        and event.date >= datetime.now()
    ):
        buttons.append([InlineKeyboardButton(text="üéü –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–∏–ª–µ—Ç—ã", url=event.link)])
    return buttons


def get_event_card_keyboard(event: Events, page: int, is_tracking: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏—è."""
    buttons = [
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"events_page:{page}")],
        [InlineKeyboardButton(text="‚Ñπ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"event_detail:{event.id}")],
    ]
    buttons.extend(get_event_base_buttons(event))
    track_text = "‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è" if is_tracking else "üîî –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å"
    track_action = "untrack_event" if is_tracking else "track_event"
    buttons.append([InlineKeyboardButton(text=track_text, callback_data=f"{track_action}:{event.id}:{page}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_event_detail_keyboard(event: Events, page: int, is_tracking: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è."""
    buttons = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"event_card:{event.id}:{page}")]]
    buttons.extend(get_event_base_buttons(event))
    track_text = "‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è" if is_tracking else "üîî –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å"
    track_action = "untrack_event" if is_tracking else "track_event"
    buttons.append([InlineKeyboardButton(text=track_text, callback_data=f"{track_action}:{event.id}:{page}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# ---------- –†–µ–Ω–¥–µ—Ä—ã ----------

async def render_event_list(
    target: Message | CallbackQuery,
    session: AsyncSession,
    page: int = 1,
    edit: bool = False
) -> None:
    """–†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    logger.debug(f"User {target.from_user.id} –æ—Ç–∫—Ä—ã–ª –∞—Ñ–∏—à—É")

    offset = (page - 1) * EVENTS_PER_PAGE
    events = (
        await session.execute(
            select(Events)
            .where(Events.date >= date.today())
            .order_by(Events.date.asc())
            .offset(offset)
            .limit(EVENTS_PER_PAGE)
        )
    ).scalars().all()

    total = (
        await session.execute(select(func.count(Events.id)).where(Events.date >= date.today()))
    ).scalar_one()

    total_pages = max((total + EVENTS_PER_PAGE - 1) // EVENTS_PER_PAGE, 1)
    logger.debug("–ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: %s, —Å—Ç—Ä–∞–Ω–∏—Ü: %s", total, total_pages)

    if not events:
        text = "‚ùå –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        logger.info("–°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ %s", page)
        if isinstance(target, CallbackQuery):
            await safe_edit_message(target.message, text)
            await target.answer()
        else:
            await target.answer(text)
        return

    text = "üìã <b>–°–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π:</b>\n\n"
    kb = get_events_keyboard(events, page, total_pages)

    if isinstance(target, CallbackQuery):
        if edit:
            await safe_edit_message(target.message, text, kb)
        else:
            await target.message.delete()
            await target.message.answer(text, reply_markup=kb, parse_mode="HTML")
        await target.answer()
    else:
        await target.answer(text, reply_markup=kb, parse_mode="HTML")


async def render_event_card(callback: CallbackQuery, session: AsyncSession, event_id: int, page: int) -> None:
    """–†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏—è."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ {event_id}")

    event = await orm_get_event(session, event_id)
    if not event:
        logger.warning("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: %s", event_id)
        await callback.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    tracking = await session.execute(
        select(UserEventTracking).where(
            UserEventTracking.user_id == callback.from_user.id,
            UserEventTracking.event_id == event_id
        )
    )
    is_tracking = tracking.scalars().first() is not None

    desc = event.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
    short_desc = desc[:350] + (
        "<i>‚Ä¶ \n\n–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>\"–ü–æ–¥—Ä–æ–±–Ω–µ–µ\"</b> —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–æ–ª—å—à–µ</i>"
        if len(desc) > 350 else ""
    )
    date_line = f"üóì {event.date:%d.%m.%Y}\n\n" if getattr(event, "date", None) else ""
    text = f"<b>{event.name} | {event.age_limits}+ </b>\n\n{date_line}{short_desc}"

    kb = get_event_card_keyboard(event, page, is_tracking=is_tracking)

    try:
        await callback.message.delete()
    except Exception:
        pass

    try:
        await callback.message.answer_photo(
            event.img,
            caption=text[:1024],
            reply_markup=kb,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ —Å–æ–±—ã—Ç–∏—è %s: %s", event_id, e)
        await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")

    await callback.answer()


async def render_event_detail(callback: CallbackQuery, session: AsyncSession, event_id: int, page: int) -> None:
    """–†–µ–Ω–¥–µ—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è."""
    logger.debug("–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: event_id=%s, page=%s", event_id, page)

    event = await orm_get_event(session, event_id)
    if not event:
        logger.warning("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: %s", event_id)
        await callback.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    text = (
        f"<b>{event.name} | {event.age_limits}+</b>\n\n"
        f"üóì {event.date:%d.%m.%Y %H:%M}\n\n"
        f"{event.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
    )

    tracking = await session.execute(
        select(UserEventTracking).where(
            UserEventTracking.user_id == callback.from_user.id,
            UserEventTracking.event_id == event_id
        )
    )
    is_tracking = tracking.scalars().first() is not None

    kb = get_event_detail_keyboard(event, page, is_tracking=is_tracking)

    await safe_edit_message(callback.message, text, kb)
    await callback.answer()


# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------

@event_router.message(Command("events"))
async def cmd_event_list(message: Message, session: AsyncSession) -> None:
    await render_event_list(message, session, page=1)


@event_router.callback_query(F.data == "list_events")
async def list_events_handler(callback: CallbackQuery, session: AsyncSession) -> None:
    await render_event_list(callback, session, page=1)


@event_router.callback_query(F.data.startswith("events_page:"))
async def events_page_handler(callback: CallbackQuery, session: AsyncSession) -> None:
    page = int(callback.data.split(":")[1])
    await render_event_list(callback, session, page, edit=True)


@event_router.callback_query(F.data.startswith("event_card:"))
async def event_card_handler(callback: CallbackQuery, session: AsyncSession) -> None:
    _, event_id, page = callback.data.split(":")
    await render_event_card(callback, session, int(event_id), int(page))


@event_router.callback_query(F.data.startswith("event_detail:"))
async def event_detail_handler(callback: CallbackQuery, session: AsyncSession) -> None:
    _, event_id = callback.data.split(":")
    await render_event_detail(callback, session, int(event_id), page=1)


@event_router.callback_query(F.data.startswith("track_event:"))
async def track_event_handler(callback: CallbackQuery, session: AsyncSession) -> None:
    _, event_id, page = callback.data.split(":")
    user_id = callback.from_user.id

    existing = await session.execute(
        select(UserEventTracking).where(
            UserEventTracking.user_id == user_id,
            UserEventTracking.event_id == int(event_id)
        )
    )
    if not existing.scalars().first():
        session.add(UserEventTracking(user_id=user_id, event_id=int(event_id)))
        await session.commit()
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ %s", user_id, event_id)

    await callback.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    await render_event_detail(callback, session, int(event_id), int(page))


@event_router.callback_query(F.data.startswith("untrack_event:"))
async def untrack_event_handler(callback: CallbackQuery, session: AsyncSession) -> None:
    _, event_id, page = callback.data.split(":")
    user_id = callback.from_user.id

    await session.execute(
        delete(UserEventTracking).where(
            UserEventTracking.user_id == user_id,
            UserEventTracking.event_id == int(event_id)
        )
    )
    await session.commit()
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏—è %s", user_id, event_id)

    await callback.answer("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–Ω—è—Ç–æ")
    await render_event_detail(callback, session, int(event_id), int(page))