from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from database.orm_query import (
    orm_add_event, orm_get_events, orm_get_event,
    orm_update_event, orm_delete_event
)
from handlers.user_private import Admin_Default_KBRD
from replyes.kbrds import get_keyboard
from aiogram.filters import Command, or_f
from datetime import datetime
admin_events_router = Router()


# –ú–µ–Ω—é


studio_buttons= [
    "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
    "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
    "‚ùå –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
    "üìã –í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
    "üîÑ–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
    "üõ†–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
]
admin_events_kbrd = get_keyboard(*studio_buttons, placeholder='',sizes=(3,3))

@admin_events_router.message(or_f(Command('admin_studios'), F.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ê—Ñ–∏—à—É'))
async def admin_studios_menu(message: types.Message):
    try:
        await state.clear()
    except:
        pass
    await message.answer('–ê–¥–º–∏–Ω: –°—Ç—É–¥–∏–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: /studios_list, /studio_add, /studio_del <id>, /studio_edit <id>',
                         reply_markup= admin_events_kbrd)


# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class EventForm(StatesGroup):
    name = State()
    description = State()
    date = State()
    link = State()
    is_free = State()
    img = State()
    is_shown = State()
    announsed = State()
    confirm = State()

# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_events_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def add_event(message: types.Message, state: FSMContext):
    await state.set_state(EventForm.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")


@admin_events_router.message(EventForm.name)
async def set_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(EventForm.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")


@admin_events_router.message(EventForm.description)
async def set_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(EventForm.date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")




@admin_events_router.message(EventForm.date)
async def set_event_date(message: types.Message, state: FSMContext):
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 31.12.2025 18:30
        event_date = datetime.strptime(message.text.strip(), "%d.%m.%Y %H:%M")
        await state.update_data(date=event_date)   # <-- —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç datetime
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):")
        await state.set_state(EventForm.link)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ü–æ–ø—Ä–æ–±—É–π —Ç–∞–∫: 31.12.2025 18:30")


@admin_events_router.message(EventForm.link)
async def set_link(message: types.Message, state: FSMContext):
    link = None if message.text.strip() == "-" else message.text.strip()
    await state.update_data(link=link)
    await state.set_state(EventForm.is_free)
    await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ? (–¥–∞/–Ω–µ—Ç)")


@admin_events_router.message(EventForm.is_free)
async def set_is_free(message: types.Message, state: FSMContext):
    is_free = message.text.lower() in ["–¥–∞", "yes", "y", "true", "1"]
    await state.update_data(is_free=is_free)
    await state.set_state(EventForm.img)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):")


@admin_events_router.message(EventForm.img)
async def set_img(message: types.Message, state: FSMContext):
    img = None if message.text.strip() == "-" else message.text.strip()
    await state.update_data(img=img)
    await state.set_state(EventForm.is_shown)
    await message.answer("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º? (–¥–∞/–Ω–µ—Ç)")


@admin_events_router.message(EventForm.is_shown)
async def set_is_shown(message: types.Message, state: FSMContext):
    is_shown = message.text.lower() in ["–¥–∞", "yes", "y", "true", "1"]
    await state.update_data(is_shown=is_shown)
    await state.set_state(EventForm.announsed)
    await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ? (–¥–∞/–Ω–µ—Ç)")


@admin_events_router.message(EventForm.announsed)
async def set_announsed(message: types.Message, state: FSMContext, session: AsyncSession):
    announsed = message.text.lower() in ["–¥–∞", "yes", "y", "true", "1"]
    await state.update_data(announsed=announsed)

    data = await state.get_data()
    text = (
        f"<b>{data['name']}</b>\n"
        f"{data["description"]}\n\n"
        f"üìÖ {data['date']}\n"
        f"üîó {data['link'] if data['link'] else '‚Äî'}\n"
        f"üí∞ {'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ' if data['is_free'] else '–ü–ª–∞—Ç–Ω–æ–µ'}\n"
        f"üëÅ {'–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è' if data['is_shown'] else '–°–∫—Ä—ã—Ç–æ'} | "
        f"üì¢ {'–ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ' if data['announsed'] else '–ù–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ'}"
    )
    await message.answer(text, parse_mode="HTML")
    await state.set_state(EventForm.confirm)
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ?")

@admin_events_router.message(EventForm.confirm)
async def confirm_add(message: types.Message, state: FSMContext, session: AsyncSession):
    announsed = message.text.lower() in ["–¥–∞", "yes", "y", "true", "1"]
    if announsed:
        data = await state.get_data()
        event = await orm_add_event(session, data)
        await state.clear()

        text = (
            f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            f"<b>{event.name}</b>\n"
            f"{event.description}\n\n"
            f"üìÖ {event.date}\n"
            f"üîó {event.link if event.link else '‚Äî'}\n"
            f"üí∞ {'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ' if event.is_free else '–ü–ª–∞—Ç–Ω–æ–µ'}\n"
            f"üëÅ {'–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è' if event.is_shown else '–°–∫—Ä—ã—Ç–æ'} | "
            f"üì¢ {'–ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ' if event.announsed else '–ù–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ'}"
        )
        await message.answer(text, parse_mode="HTML", reply_markup=admin_events_kbrd)
    else:
        await state.clear()
        await message.answer(f'–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=admin_events_kbrd)

# üìã –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
@admin_events_router.message(F.text == "üìã –í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def list_events(message: types.Message, session: AsyncSession):
    events = await orm_get_events(session)
    if not events:
        await message.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç", reply_markup=admin_events_kbrd)
        return

    text = "üìå <b>–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:</b>\n\n"
    for ev in events:
        text += f"ID: {ev.id} | {ev.name} ({ev.date.day}\t {ev.date.month})\n"

    await message.answer(text, parse_mode="HTML")


# üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
class EditEventForm(EventForm):
    id = State()


@admin_events_router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def choose_event(message: types.Message, state: FSMContext, session: AsyncSession):
    events = await orm_get_events(session)
    if not events:
        await message.answer("‚ùå –ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return

    text = "–í–≤–µ–¥–∏—Ç–µ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n\n"
    for ev in events:
        text += f"ID: {ev.id} | {ev.name} | {ev.date}\n"

    await state.set_state(EditEventForm.id)
    await message.answer(text)


@admin_events_router.message(EditEventForm.id)
async def start_edit(message: types.Message, state: FSMContext, session: AsyncSession):
    if type(message.text)  is int:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")
        return
    event_id = int(message.text)
    event = await orm_get_event(session, event_id)
    if not event:
        await message.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    await state.update_data(id=event_id)
    await state.set_state(EditEventForm.name)
    await message.answer(f"–ò–∑–º–µ–Ω—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: <b>{event.name}</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", parse_mode="HTML")


# ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ
@admin_events_router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def delete_event_start(message: types.Message, session: AsyncSession, state: FSMContext):
    events = await orm_get_events(session)
    if not events:
        await message.answer("‚ùå –ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    text = "–í–≤–µ–¥–∏—Ç–µ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for ev in events:
        text += f"ID: {ev.id} | {ev.name}\n"

    await state.set_state("delete_event_id")
    await message.answer(text)


@admin_events_router.message(F.text.regexp(r"^\d+$"), StateFilter("delete_event_id"))
async def confirm_delete(message: types.Message, state: FSMContext, session: AsyncSession):
    event_id = int(message.text)
    await orm_delete_event(session, event_id)
    await state.clear()
    await message.answer("‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ")
