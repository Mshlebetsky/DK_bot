from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import asyncio

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func


from database import orm_query
from database.models import Events
from database.orm_query import (
    orm_add_event, orm_update_event, orm_delete_event,
    orm_get_events, orm_get_event_by_name
)
from logic.scrap_events import update_all_events

admin_events_router = Router()

# --- FSM ---
class AddEventFSM(StatesGroup):
    name = State()
    date = State()
    description = State()
    link = State()
    img = State()

class EditEventFSM(StatesGroup):
    id = State()
    field = State()
    value = State()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_admin_events_kb():
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="add_event")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="edit_event")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="delete_event")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π", callback_data="list_events")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è", callback_data="update_all_events")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é ---
@admin_events_router.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ê—Ñ–∏—à—É")
async def admin_events_menu(message: Message):
    await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏:", reply_markup=get_admin_events_kb())

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ---
@admin_events_router.callback_query(F.data == "add_event")
async def add_event_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddEventFSM.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")

@admin_events_router.message(AddEventFSM.name)
async def add_event_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddEventFSM.date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n'-' –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è):")

@admin_events_router.message(AddEventFSM.date)
async def add_event_date(message: Message, state: FSMContext):
    from datetime import datetime
    if message.text == "-":
        await state.clear()
        return
    try:
        event_date = datetime.strptime(message.text, "%Y-%m-%d %H:%M")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 2025-08-21 18:30")
        return
    await state.update_data(date=event_date)
    await state.set_state(AddEventFSM.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")

@admin_events_router.message(AddEventFSM.description)
async def add_event_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddEventFSM.link)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):")

@admin_events_router.message(AddEventFSM.link)
async def add_event_link(message: Message, state: FSMContext):
    link = None if message.text == "-" else message.text
    await state.update_data(link=link)
    await state.set_state(AddEventFSM.img)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):")

@admin_events_router.message(AddEventFSM.img)
async def add_event_img(message: Message, state: FSMContext, session: AsyncSession):
    img = None if message.text == "-" else message.text
    await state.update_data(img=img)
    data = await state.get_data()
    await orm_add_event(session, data)
    await state.clear()
    await message.answer("‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=get_admin_events_kb())

# --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ---
@admin_events_router.callback_query(F.data == "edit_event")
async def edit_event_start(callback: CallbackQuery, session: AsyncSession):
    events = await orm_get_events(session)
    if not events:
        await callback.message.answer("‚ùå –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=e.name, callback_data=f"edit_event_{e.id}")] for e in events
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ:", reply_markup=kb)

@admin_events_router.callback_query(F.data.startswith("edit_event_"))
async def edit_event_choose(callback: CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[2])
    await state.update_data(id=event_id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="field_name")],
        [InlineKeyboardButton(text="–î–∞—Ç–∞", callback_data="field_date")],
        [InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="field_description")],
        [InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞", callback_data="field_link")],
        [InlineKeyboardButton(text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="field_img")],
    ])
    await state.set_state(EditEventFSM.field)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=kb)

@admin_events_router.callback_query(F.data.startswith("field_"), EditEventFSM.field)
async def edit_event_field(callback: CallbackQuery, state: FSMContext):
    field = callback.data.replace("field_", "")
    await state.update_data(field=field)
    await state.set_state(EditEventFSM.value)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è {field}:")

@admin_events_router.message(EditEventFSM.value)
async def edit_event_value(message: Message, state: FSMContext, session: AsyncSession):
    from datetime import datetime
    data = await state.get_data()
    field = data["field"]
    value = message.text
    if field == "date":
        try:
            value = datetime.strptime(value, "%Y-%m-%d %H:%M")
        except ValueError:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: 2025-08-21 18:30")
            return
    await orm_update_event(session, data["id"], {field: value})
    await state.clear()
    await message.answer("‚úÖ –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!", reply_markup=get_admin_events_kb())

# --- –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ---
@admin_events_router.callback_query(F.data == "delete_event")
async def delete_event_start(callback: CallbackQuery, session: AsyncSession):
    events = await orm_get_events(session)
    if not events:
        await callback.message.answer("‚ùå –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=e.name, callback_data=f"delete_event_{e.id}")] for e in events
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ:", reply_markup=kb)

@admin_events_router.callback_query(F.data.startswith("delete_event_"))
async def delete_event_confirm(callback: CallbackQuery, session: AsyncSession):
    event_id = int(callback.data.split("_")[2])
    await orm_delete_event(session, event_id)
    await callback.message.answer("üóë –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=get_admin_events_kb())

# --- –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π ---
EVENTS_PER_PAGE = 8

def get_events_keyboard(events, page: int, total_pages: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
    keyboard = [
        [InlineKeyboardButton( text=f"{ev.date:%d.%m} | {ev.name[:30].capitalize()}", callback_data=f"event_card:{ev.id}:{page}")]
        for ev in events
    ]
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚èÆ –ù–∞–∑–∞–¥", callback_data=f"events_page:{page-1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="‚è≠ –î–∞–ª–µ–µ", callback_data=f"events_page:{page+1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def list_events(message_or_callback, session: AsyncSession, page: int = 1):
    offset = (page - 1) * EVENTS_PER_PAGE
    events = (
        await session.execute(
            select(Events)
            .offset(offset)
            .limit(EVENTS_PER_PAGE)
            .order_by(Events.date.asc())
        )
    ).scalars().all()

    total = (await session.execute(select(func.count(Events.id)))).scalar_one()
    total_pages = (total + EVENTS_PER_PAGE - 1) // EVENTS_PER_PAGE

    if not events:
        target = message_or_callback.message if isinstance(message_or_callback, types.CallbackQuery) else message_or_callback
        await target.answer("–°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        if isinstance(message_or_callback, types.CallbackQuery):
            await message_or_callback.answer()
        return

    # text = "<b>–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:</b>\n\n" + "\n".join(f"‚ñ´Ô∏è {ev.name}" for ev in events)
    text = "<b>üìã –°–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π:</b>\n\n"
    kb = get_events_keyboard(events, page, total_pages)

    if isinstance(message_or_callback, types.CallbackQuery):
        msg = message_or_callback.message
        try:
            if msg.text:  # –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                await msg.edit_text(text, reply_markup=kb, ParseMode="HTML")
            elif msg.caption is not None:
                # —ç—Ç–æ –º–µ–¥–∏–∞ ‚Äî –Ω–∞–¥—ë–∂–Ω–µ–µ —É–¥–∞–ª–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–∫ —Ç–µ–∫—Å—Ç
                try:
                    await msg.delete()
                except Exception:
                    pass
                await msg.answer(text, reply_markup=kb)
            else:
                # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                await msg.answer(text, reply_markup=kb)
        except Exception:
            # –æ–±—â–∏–π —Ñ–æ–ª–ª–±–µ–∫
            await msg.answer(text, reply_markup=kb)
        await message_or_callback.answer()
    else:
        await message_or_callback.answer(text, reply_markup=kb)

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞

@admin_events_router.message(F.text.in_({"üìã –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π","–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π", "–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"}))
async def events_list_command(message: types.Message, session: AsyncSession):
    await list_events(message, session, page=1)
@admin_events_router.callback_query(F.data.in_({"list_events", "events_list"}))
async def events_list_callback(callback: types.CallbackQuery, session: AsyncSession):
    await list_events(callback, session, page=1)

# –ø–∞–≥–∏–Ω–∞—Ü–∏—è
@admin_events_router.callback_query(F.data.startswith("events_page:"))
async def events_page_handler(callback: CallbackQuery, session: AsyncSession):
    page = int(callback.data.split(":")[1])
    await list_events(callback, session, page)


# –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–±—ã—Ç–∏—è (–∫—Ä–∞—Ç–∫–∞—è)
@admin_events_router.callback_query(F.data.startswith("event_card:"))
async def event_card_handler(callback: CallbackQuery, session: AsyncSession):
    _, event_id, page = callback.data.split(":")
    event = await session.get(Events, int(event_id))
    if not event:
        await callback.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    desc = event.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
    short_desc = (desc[:500] + "‚Ä¶") if len(desc) > 500 else desc
    date_line = f"üóì {event.date:%d.%m.%Y}\n\n" if getattr(event, "date", None) else ""
    text = f"<b>{event.name}</b>\n\n{date_line}{short_desc}"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"events_page:{page}")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"event_detail:{event.id}")]
    ])

    # —É–¥–∞–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏ —à–ª—ë–º –∫–∞—Ä—Ç–æ—á–∫—É
    try:
        await callback.message.delete()
    except Exception:
        pass

    if getattr(event, "img", None):
        await callback.message.answer_photo(event.img, caption=text, reply_markup=kb)
    else:
        await callback.message.answer(text, reply_markup=kb)

    await callback.answer()


# –ø–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
@admin_events_router.callback_query(F.data.startswith("event_detail:"))
async def event_detail_handler(callback: CallbackQuery, session: AsyncSession):
    event_id = int(callback.data.split(":")[1])
    event = await session.get(Events, event_id)
    if not event:
        await callback.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    text = (
        f"<b>{event.name}</b>\n\n"
        f"üóì {event.date:%d.%m.%Y}\n\n"
        f"{event.description}\n"
    )

    # kb = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="events_page:1")]]
    kb = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="events_page:1")]]

    if event.link:
        kb.append([InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", url=event.link)])

    if event.img:
        try:
            await callback.message.answer_photo(event.img, caption=text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
        except Exception:
            await callback.message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
    else:
        await callback.message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))

    await callback.answer()

# --- –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è ---
@admin_events_router.callback_query(F.data == "update_all_events")
async def update_all_events_handler(callback: CallbackQuery, session: AsyncSession):
    await callback.message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ñ–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ~2-3 –º–∏–Ω—É—Ç—ã")

    try:
        data, log_text = await asyncio.to_thread(update_all_events)
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return

    updated, added = 0, 0
    from datetime import datetime
    for name, values in data.items():
        try:
            event_date, description, img, link = values
        except ValueError:
            await callback.message.answer(f"‚ö† –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {name}")
            continue

        event = await orm_query.orm_get_event_by_name(session, name)
        if event:
            await orm_update_event(session, event.id, {
                "date": datetime.strptime(event_date, "%Y-%m-%d %H:%M"),
                "description": description,
                "img": img,
                "link": link
            })
            updated += 1
        else:
            await orm_add_event(session, {
                "name": name,
                "date": datetime.strptime(event_date, "%Y-%m-%d %H:%M"),
                "description": description,
                "img": img,
                "link": link
            })
            added += 1

    await callback.message.answer(
        f"{log_text}\n\n"
        f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}\n"
        f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}",
        reply_markup=get_admin_events_kb()
    )