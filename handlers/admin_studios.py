import asyncio
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import or_f, Command

from sqlalchemy.ext.asyncio import AsyncSession
from database.orm_query import (
    orm_add_studio,
    orm_update_studio,
    orm_delete_studio,
    orm_get_studios,
    orm_get_studio_by_name,
)
from logic.scrap_studios import update_all_studios
from filter.filter import IsSuperAdmin, IsEditor

# ================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==================

logger = logging.getLogger(__name__)

# ================== –†–û–£–¢–ï–† ==================


admin_studios_router = Router()
admin_studios_router.message.filter(or_f(IsSuperAdmin(), IsEditor()))


# --- FSM States ---
class AddStudioFSM(StatesGroup):
    name = State()
    description = State()
    teacher = State()
    cost = State()
    age = State()
    category = State()
    qr_img = State()
    img = State()


class EditStudioFSM(StatesGroup):
    id = State()
    field = State()
    value = State()


class DeleteStudioFSM(StatesGroup):
    id = State()


# --- Keyboards ---
def get_admin_studios_kb() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–∏—è–º–∏"""
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–∏—é", callback_data="add_studio")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—É–¥–∏—é", callback_data="edit_studio")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–∏—é", callback_data="delete_studio")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–∏–π", callback_data="list_studios")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å—Ç—É–¥–∏–∏", callback_data="update_all_studios")],
        [InlineKeyboardButton(text="üõ† –í –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# --- Admin Panel ---
@admin_studios_router.message(Command("edit_studios"))
async def admin_studios_menu(message: Message):
    """–í—ã–≤–æ–¥ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–∏—è–º–∏"""
    logger.info("–û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–∏—è–º–∏ (user_id=%s)", message.from_user.id)
    await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–∏—è–º–∏:", reply_markup=get_admin_studios_kb())


@admin_studios_router.callback_query(F.data == "edit_studios_panel")
async def admin_studios_panel(callback: CallbackQuery):
    logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–∏—è–º–∏ (user_id=%s)", callback.from_user.id)
    await callback.message.edit_text("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–∏—è–º–∏:", reply_markup=get_admin_studios_kb())


# --- Add Studio ---
@admin_studios_router.callback_query(F.data == "add_studio")
async def add_studio_start(callback: CallbackQuery, state: FSMContext):
    logger.info("–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–∏–∏ (user_id=%s)", callback.from_user.id)
    await state.set_state(AddStudioFSM.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—É–¥–∏–∏:")


@admin_studios_router.message(AddStudioFSM.name)
async def add_studio_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    logger.debug("–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—É–¥–∏–∏: %s", message.text)
    await state.set_state(AddStudioFSM.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—É–¥–∏–∏:")


@admin_studios_router.message(AddStudioFSM.description)
async def add_studio_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    logger.debug("–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—É–¥–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    await state.set_state(AddStudioFSM.teacher)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):")


@admin_studios_router.message(AddStudioFSM.teacher)
async def add_studio_teacher(message: Message, state: FSMContext):
    await state.update_data(teacher=message.text)
    logger.debug("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: %s", message.text)
    await state.set_state(AddStudioFSM.cost)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å (0 –µ—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ):")


@admin_studios_router.message(AddStudioFSM.cost)
async def add_studio_cost(message: Message, state: FSMContext):
    try:
        cost = int(message.text)
        await state.update_data(cost=cost)
        logger.debug("–°—Ç–æ–∏–º–æ—Å—Ç—å: %d", cost)
    except ValueError:
        logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: %s", message.text)
        await message.answer("‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    await state.set_state(AddStudioFSM.age)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, '6-12'):")


@admin_studios_router.message(AddStudioFSM.age)
async def add_studio_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    logger.debug("–í–æ–∑—Ä–∞—Å—Ç: %s", message.text)
    await state.set_state(AddStudioFSM.category)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç—É–¥–∏–∏:")


@admin_studios_router.message(AddStudioFSM.category)
async def add_studio_category(message: Message, state: FSMContext):
    await state.update_data(category=message.text.lower())
    logger.debug("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s", message.text.lower())
    await state.set_state(AddStudioFSM.qr_img)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ QR-–∫–∞—Ä—Ç–∏–Ω–∫—É (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):")


@admin_studios_router.message(AddStudioFSM.qr_img)
async def add_studio_qr_img(message: Message, state: FSMContext):
    qr_img = None if message.text == "-" else message.text
    await state.update_data(qr_img=qr_img)
    logger.debug("QR-img: %s", qr_img)
    await state.set_state(AddStudioFSM.img)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—É–¥–∏–∏ (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):")


@admin_studios_router.message(AddStudioFSM.img)
async def add_studio_img(message: Message, state: FSMContext, session: AsyncSession):
    img = None if message.text == "-" else message.text
    await state.update_data(img=img)
    data = await state.get_data()

    try:
        await orm_add_studio(session, data)
        logger.info("–°—Ç—É–¥–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: %s", data.get("name"))
        await message.answer("‚úÖ –°—Ç—É–¥–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_admin_studios_kb())
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–∏–∏: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–∏–∏.")
    finally:
        await state.clear()


# --- Edit Studio ---
@admin_studios_router.callback_query(F.data == "edit_studio")
async def edit_studio_start(callback: CallbackQuery, session: AsyncSession):
    studios = await orm_get_studios(session)
    if not studios:
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—É–¥–∏–∏, –Ω–æ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
        await callback.message.answer("‚ùå –ù–µ—Ç —Å—Ç—É–¥–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=st.name, callback_data=f"edit_studio_{st.id}")]
            for st in studios
        ]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)


@admin_studios_router.callback_query(F.data.startswith("edit_studio_"))
async def edit_studio_choose(callback: CallbackQuery, state: FSMContext):
    studio_id = int(callback.data.split("_")[2])
    await state.update_data(id=studio_id)
    await state.set_state(EditStudioFSM.field)
    logger.info("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–∏–∏ id=%s", studio_id)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=label, callback_data=f"field_{field}")]
            for label, field in [
                ("–ù–∞–∑–≤–∞–Ω–∏–µ", "name"),
                ("–û–ø–∏—Å–∞–Ω–∏–µ", "description"),
                ("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", "teacher"),
                ("–°—Ç–æ–∏–º–æ—Å—Ç—å", "cost"),
                ("–í–æ–∑—Ä–∞—Å—Ç", "age"),
                ("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "category"),
                ("QR", "qr_img"),
                ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "img"),
            ]
        ]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=kb)


@admin_studios_router.callback_query(F.data.startswith("field_"), EditStudioFSM.field)
async def edit_studio_field(callback: CallbackQuery, state: FSMContext):
    field = callback.data.replace("field_", "")
    await state.update_data(field=field)
    await state.set_state(EditStudioFSM.value)
    logger.debug("–í—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: %s", field)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è {field}:")


@admin_studios_router.message(EditStudioFSM.value)
async def edit_studio_value(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    field, value, studio_id = data["field"], message.text, data["id"]

    if field == "cost":
        try:
            value = int(value)
        except ValueError:
            logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: %s", message.text)
            await message.answer("‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
            return

    try:
        await orm_update_studio(session, studio_id, field, value)
        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ %s —É —Å—Ç—É–¥–∏–∏ id=%s", field, studio_id)
        await message.answer("‚úÖ –°—Ç—É–¥–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!", reply_markup=get_admin_studios_kb())
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–∏–∏ id=%s: %s", studio_id, e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–∏–∏.")
    finally:
        await state.clear()


# --- Delete Studio ---
@admin_studios_router.callback_query(F.data == "delete_studio")
async def delete_studio_start(callback: CallbackQuery, session: AsyncSession):
    studios = await orm_get_studios(session)
    if not studios:
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–∏–∏, –Ω–æ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
        await callback.message.answer("‚ùå –ù–µ—Ç —Å—Ç—É–¥–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=st.name, callback_data=f"delete_studio_{st.id}")]
            for st in studios
        ]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)


@admin_studios_router.callback_query(F.data.startswith("delete_studio_"))
async def delete_studio_confirm(callback: CallbackQuery, session: AsyncSession):
    studio_id = int(callback.data.split("_")[2])
    try:
        await orm_delete_studio(session, studio_id)
        logger.info("–£–¥–∞–ª–µ–Ω–∞ —Å—Ç—É–¥–∏—è id=%s", studio_id)
        await callback.message.answer("üóë –°—Ç—É–¥–∏—è —É–¥–∞–ª–µ–Ω–∞!", reply_markup=get_admin_studios_kb())
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–∏–∏ id=%s: %s", studio_id, e)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–∏–∏.")


# --- Update All Studios ---
@admin_studios_router.callback_query(F.data == "update_all_studios")
async def update_all_studios_handler(callback: CallbackQuery, session: AsyncSession):
    logger.info("–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç—É–¥–∏–π (user_id=%s)", callback.from_user.id)
    await callback.message.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–∏–π... (~3 –º–∏–Ω—É—Ç—ã)")

    try:
        data, log_text = await asyncio.to_thread(update_all_studios)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –ø–∞—Ä—Å–µ—Ä–∞ —Å—Ç—É–¥–∏–π: %s", e)
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return

    updated, added = 0, 0
    for name, values in data.items():
        try:
            description, cost, age, img, qr_img, teacher, category = values
        except ValueError:
            logger.warning("–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—É–¥–∏—è %s: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", name)
            await callback.message.answer(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—É–¥–∏—è {name}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            continue

        try:
            studio = await orm_get_studio_by_name(session, name)
            if studio:
                await orm_update_studio(session, studio.id, "description", description)
                await orm_update_studio(session, studio.id, "cost", int(cost))
                await orm_update_studio(session, studio.id, "age", age)
                await orm_update_studio(session, studio.id, "img", img)
                await orm_update_studio(session, studio.id, "qr_img", qr_img)
                await orm_update_studio(session, studio.id, "teacher", teacher)
                await orm_update_studio(session, studio.id, "category", category)
                updated += 1
                logger.debug("–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—É–¥–∏—è %s", name)
            else:
                new_data = {
                    "name": name,
                    "description": description,
                    "teacher": teacher,
                    "cost": int(cost),
                    "age": age,
                    "category": category,
                    "qr_img": qr_img,
                    "img": img,
                }
                await orm_add_studio(session, new_data)
                added += 1
                logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—É–¥–∏—è %s", name)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—É–¥–∏–∏ %s: %s", name, e)

    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–Ω–æ–≤–ª–µ–Ω–æ=%d, –î–æ–±–∞–≤–ª–µ–Ω–æ=%d", updated, added)
    await callback.message.answer(
        f"{log_text}\n\n"
        f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}\n"
        f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}",
        reply_markup=get_admin_studios_kb()
    )
