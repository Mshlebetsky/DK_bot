from aiogram import Router, types, F
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from aiogram import Bot
from database.models import Users

from filter.filter import ChatTypeFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from database.orm_query import orm_get_user, orm_update_user_subscription, orm_get_subscribers

notificate_router = Router()
notificate_router.message.filter(ChatTypeFilter(["private"]))


def get_subscriptions_kb(user):
    buttons = []

    # –ù–æ–≤–æ—Å—Ç–∏
    if user.news_subscribed:
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π", callback_data="unsub_news")])
    else:
        buttons.append([InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="sub_news")])

    # –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    if user.events_subscribed:
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data="unsub_events")])
    else:
        buttons.append([InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="sub_events")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


@notificate_router.message(F.text == "üîî –ü–æ–¥–ø–∏—Å–∫–∏")
async def show_subscriptions(message: types.Message, session: AsyncSession):
    user = await orm_get_user(session, message.from_user.id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=get_subscriptions_kb(user))


@notificate_router.callback_query(F.data.in_(["sub_news", "unsub_news", "sub_events", "unsub_events"]))
async def toggle_subscription(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id

    if callback.data == "sub_news":
        await orm_update_user_subscription(session, user_id, news=True)
        text = "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!"
    elif callback.data == "unsub_news":
        await orm_update_user_subscription(session, user_id, news=False)
        text = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞."
    elif callback.data == "sub_events":
        await orm_update_user_subscription(session, user_id, events=True)
        text = "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!"
    else:
        await orm_update_user_subscription(session, user_id, events=False)
        text = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."

    user = await orm_get_user(session, user_id)
    await callback.message.edit_reply_markup(reply_markup=get_subscriptions_kb(user))
    await callback.answer(text)

async def notify_subscribers(bot: Bot, session: AsyncSession, text: str, img: str = None):
    # –¥–æ—Å—Ç–∞—ë–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    result = await session.execute(
        select(Users.id).where(Users.news_subscribed == True)
    )
    subscribers = [row[0] for row in result.fetchall()]

    if not subscribers:
        return  # –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –≤—ã—Ö–æ–¥–∏–º

    for user_id in subscribers:
        try:
            if img:
                await bot.send_photo(user_id, img, caption=text, parse_mode="HTML")
            else:
                await bot.send_message(user_id, text, parse_mode="HTML")
        except Exception as e:
            # –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")