from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup
import re

def is_valid_url(url: str) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É"""
    if not url:
        return False
    pattern = r"^https?:\/\/.*\.(jpg|jpeg|png|gif|webp)(\?.*)?$"
    return re.match(pattern, url, re.IGNORECASE) is not None


async def send_photo_with_text(
    bot: Bot,
    chat_id: int,
    photo: str,
    text: str,
    reply_markup: InlineKeyboardMarkup | None = None,
    parse_mode: str = "HTML"
):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–ª–ø–µ—Ä:
    - –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π URL —Ñ–æ—Ç–æ ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    - –µ—Å–ª–∏ URL –±–∏—Ç—ã–π –∏–ª–∏ Telegram –µ–≥–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç ‚Üí —à–ª—ë–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    """
    if photo and is_valid_url(photo):
        try:
            if len(text) <= 1024:
                await bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
            else:
                await bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    reply_markup=reply_markup
                )
                await bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    parse_mode=parse_mode
                )
            return
        except Exception as e:
            # fallback –µ—Å–ª–∏ Telegram –Ω–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å
            print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ {photo}: {e}")

    # –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–æ –±–∏—Ç–æ–µ
    await bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=reply_markup,
        parse_mode=parse_mode
    )

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types

async def send_item_card(
    callback: types.CallbackQuery,
    item_id: int,
    page: int,
    title: str,
    short_text: str,
    img: str | None,
    detail_callback: str,
):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ (—Å –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ–π).
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ (—É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É) –∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.
    """
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"close_card:{callback.message.message_id}:{page}"),
        InlineKeyboardButton(text="‚Ñπ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"{detail_callback}:{item_id}:{page}")
    ]])

    if img:
        try:
            await callback.message.answer_photo(
                img,
                caption=f"<b>{title}</b>\n\n{short_text}",
                reply_markup=kb,
                parse_mode="HTML"
            )
        except Exception:
            await callback.message.answer(
                f"<b>{title}</b>\n\n{short_text}",
                reply_markup=kb,
                parse_mode="HTML"
            )
    else:
        await callback.message.answer(
            f"<b>{title}</b>\n\n{short_text}",
            reply_markup=kb,
            parse_mode="HTML"
        )


async def close_item_card(callback: types.CallbackQuery):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    """
    _, list_msg_id, page = callback.data.split(":")
    try:
        await callback.bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id
        )
    except Exception:
        pass
    await callback.answer()
