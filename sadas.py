# –ü—Ä–æ–≤–µ—Ä—å, –≤—Å—ë –ª–∏ —Ç–∞–∫ —Å admin_events, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –æ–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–∞–∫ –∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ "–ø–æ–¥—Ä–æ–±–Ω–µ–µ" from aiogram import Router, F, types from aiogram.types import ( Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup ) from aiogram.fsm.context import FSMContext from aiogram.fsm.state import StatesGroup, State from sqlalchemy.ext.asyncio import AsyncSession from sqlalchemy import select, func from database import orm_query from database.models import Events from database.orm_query import ( orm_add_event, orm_update_event, orm_delete_event, orm_get_event, orm_get_events ) from logic.scrap_events import update_all_events from logic.helper import send_entity_card, send_entity_full admin_events_router = Router() # --- FSM --- class AddEventFSM(StatesGroup): name = State() date = State() description = State() link = State() img = State() class EditEventFSM(StatesGroup): id = State() field = State() value = State() # ----- Universal HANDLER from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton async def send_entity_card(callback, entity, back_cb: str, detail_cb: str): """ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—É—â–Ω–æ—Å—Ç–∏ (—Å—Ç—É–¥–∏—è, —Å–æ–±—ã—Ç–∏–µ, –Ω–æ–≤–æ—Å—Ç—å). :param callback: –æ–±—ä–µ–∫—Ç CallbackQuery :param entity: –æ–±—ä–µ–∫—Ç SQLAlchemy (Studios, Events, News) :param back_cb: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" :param detail_cb: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" """ # –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç text = f"<b>{entity.name}</b>\n\n" description = (entity.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è") short_desc = description[:500] + ("‚Ä¶" if len(description) > 500 else "") text += short_desc # –ö–Ω–æ–ø–∫–∏ buttons = [ [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=back_cb)], [InlineKeyboardButton(text="‚Ñπ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=detail_cb)] ] if getattr(entity, "link", None): # –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ buttons.append([InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏", url=entity.link)]) kb = InlineKeyboardMarkup(inline_keyboard=buttons) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å if getattr(entity, "img", None): try: await callback.message.answer_photo( photo=entity.img, caption=text[:1024], # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram reply_markup=kb ) except Exception as e: print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}") await callback.message.answer(text, reply_markup=kb) else: await callback.message.answer(text, reply_markup=kb) await callback.answer() async def send_entity_full(callback, entity, back_cb: str): """ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ """ text = f"<b>{entity.name}</b>\n\n{entity.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}" buttons = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=back_cb)]] if getattr(entity, "link", None): buttons.append([InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏", url=entity.link)]) kb = InlineKeyboardMarkup(inline_keyboard=buttons) await callback.message.answer(text, reply_markup=kb) await callback.answer() # --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --- def get_admin_events_kb(): buttons = [ [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="add_event")], [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="edit_event")], [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="delete_event")], [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π", callback_data="list_events")], [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è", callback_data="update_all_events")], ] return InlineKeyboardMarkup(inline_keyboard=buttons) # --- –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é --- @admin_events_router.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ê—Ñ–∏—à—É") async def admin_events_menu(message: Message): await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏:", reply_markup=get_admin_events_kb()) # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è --- @admin_events_router.callback_query(F.data == "add_event") async def add_event_start(callback: CallbackQuery, state: FSMContext): await state.set_state(AddEventFSM.name) await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:") @admin_events_router.message(AddEventFSM.name) async def add_event_name(message: Message, state: FSMContext): await state.update_data(name=message.text) await state.set_state(AddEventFSM.date) await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):") @admin_events_router.message(AddEventFSM.date) async def add_event_date(message: Message, state: FSMContext): from datetime import datetime try: event_date = datetime.strptime(message.text, "%Y-%m-%d %H:%M") except ValueError: await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 2025-08-21 18:30") return await state.update_data(date=event_date) await state.set_state(AddEventFSM.description) await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:") @admin_events_router.message(AddEventFSM.description) async def add_event_description(message: Message, state: FSMContext): await state.update_data(description=message.text) await state.set_state(AddEventFSM.link) await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):") @admin_events_router.message(AddEventFSM.link) async def add_event_link(message: Message, state: FSMContext): link = None if message.text == "-" else message.text await state.update_data(link=link) await state.set_state(AddEventFSM.img) await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):") @admin_events_router.message(AddEventFSM.img) async def add_event_img(message: Message, state: FSMContext, session: AsyncSession): img = None if message.text == "-" else message.text await state.update_data(img=img) data = await state.get_data() await orm_add_event(session, data) await state.clear() await message.answer("‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=get_admin_events_kb()) # --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è --- @admin_events_router.callback_query(F.data == "edit_event") async def edit_event_start(callback: CallbackQuery, session: AsyncSession): events = await orm_get_events(session) if not events: await callback.message.answer("‚ùå –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.") return kb = InlineKeyboardMarkup(inline_keyboard=[ [InlineKeyboardButton(text=e.name, callback_data=f"edit_event_{e.id}")] for e in events ]) await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ:", reply_markup=kb) @admin_events_router.callback_query(F.data.startswith("edit_event_")) async def edit_event_choose(callback: CallbackQuery, state: FSMContext): event_id = int(callback.data.split("_")[2]) await state.update_data(id=event_id) kb = InlineKeyboardMarkup(inline_keyboard=[ [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="field_name")], [InlineKeyboardButton(text="–î–∞—Ç–∞", callback_data="field_date")], [InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="field_description")], [InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞", callback_data="field_link")], [InlineKeyboardButton(text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="field_img")], ]) await state.set_state(EditEventFSM.field) await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=kb) @admin_events_router.callback_query(F.data.startswith("field_"), EditEventFSM.field) async def edit_event_field(callback: CallbackQuery, state: FSMContext): field = callback.data.replace("field_", "") await state.update_data(field=field) await state.set_state(EditEventFSM.value) await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è {field}:") @admin_events_router.message(EditEventFSM.value) async def edit_event_value(message: Message, state: FSMContext, session: AsyncSession): from datetime import datetime data = await state.get_data() field = data["field"] value = message.text if field == "date": try: value = datetime.strptime(value, "%Y-%m-%d %H:%M") except ValueError: await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: 2025-08-21 18:30") return await orm_update_event(session, data["id"], {field: value}) await state.clear() await message.answer("‚úÖ –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!", reply_markup=get_admin_events_kb()) # --- –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è --- @admin_events_router.callback_query(F.data == "delete_event") async def delete_event_start(callback: CallbackQuery, session: AsyncSession): events = await orm_get_events(session) if not events: await callback.message.answer("‚ùå –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.") return kb = InlineKeyboardMarkup(inline_keyboard=[ [InlineKeyboardButton(text=e.name, callback_data=f"delete_event_{e.id}")] for e in events ]) await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ:", reply_markup=kb) @admin_events_router.callback_query(F.data.startswith("delete_event_")) async def delete_event_confirm(callback: CallbackQuery, session: AsyncSession): event_id = int(callback.data.split("_")[2]) await orm_delete_event(session, event_id) await callback.message.answer("üóë –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=get_admin_events_kb()) # --- –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π --- EVENTS_PER_PAGE = 8 def get_events_keyboard(events, page: int, total_pages: int) -> InlineKeyboardMarkup: keyboard = [ # –≤–∞–∂–Ω–æ: –ø–µ—Ä–µ–¥–∞—ë–º –∏ id, –∏ page –≤ detail [InlineKeyboardButton( text=f"{'üÜì' if (e.is_free or 0) else 'üí≥'} {e.name}", callback_data=f"event_detail:{e.id}:{page}" )] for e in events ] nav = [] if page > 1: nav.append(InlineKeyboardButton(text="‚èÆ –ù–∞–∑–∞–¥", callback_data=f"events_page:{page-1}")) if page < total_pages: nav.append(InlineKeyboardButton(text="‚è≠ –î–∞–ª–µ–µ", callback_data=f"events_page:{page+1}")) if nav: keyboard.append(nav) return InlineKeyboardMarkup(inline_keyboard=keyboard) @admin_events_router.callback_query(F.data.startswith("list_events:")) async def list_events(message_or_callback, session: AsyncSession, page: int = 1): offset = (page - 1) * EVENTS_PER_PAGE res = await session.execute( select(Events).order_by(Events.date.desc()).offset(offset).limit(EVENTS_PER_PAGE) ) events = res.scalars().all() total = (await session.execute(select(func.count(Events.id)))).scalar_one() total_pages = max(1, (total + EVENTS_PER_PAGE - 1) // EVENTS_PER_PAGE) if not events: await (message_or_callback.message if isinstance(message_or_callback, types.CallbackQuery) else message_or_callback)\ .answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã") return text = "<b>–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:</b>\n\n" + "\n".join(f"‚ñ´Ô∏è {e.name}" for e in events) kb = get_events_keyboard(events, page, total_pages) if isinstance(message_or_callback, types.CallbackQuery): # –ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º try: if message_or_callback.message.text: await message_or_callback.message.edit_text(text, reply_markup=kb) elif message_or_callback.message.caption: await message_or_callback.message.edit_caption(text, reply_markup=kb) else: await message_or_callback.message.answer(text, reply_markup=kb) except Exception: await message_or_callback.message.answer(text, reply_markup=kb) await message_or_callback.answer() else: await message_or_callback.answer(text, reply_markup=kb) # —Å—Ç–∞—Ä—Ç –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ (–∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞) @admin_events_router.message(F.text == "–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π") async def events_list_command(message: types.Message, session: AsyncSession): await list_events(message, session, page=1) # –ø–∞–≥–∏–Ω–∞—Ü–∏—è @admin_events_router.callback_query(F.data.startswith("events_page:")) async def events_page_handler(callback: types.CallbackQuery, session: AsyncSession): page = int(callback.data.split(":")[1]) await list_events(callback, session, page) # –∫–∞—Ä—Ç–æ—á–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–∫—Ä–∞—Ç–∫–æ, —Å —Ñ–æ—Ç–æ) @admin_events_router.callback_query(F.data.startswith("event_detail:")) async def event_detail(callback: types.CallbackQuery, session: AsyncSession): # –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: event_detail:{id}:{page} _, event_id, page = callback.data.split(":") event_id = int(event_id) page = int(page) event = await orm_get_event(session, event_id) if not event: await callback.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True) return await send_entity_card( callback, event, back_cb=f"events_page:{page}", # <‚Äî —Å—é–¥–∞ –≤–µ—Ä–Ω—ë–º—Å—è detail_cb=f"event_full:{event.id}:{page}" ) # –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ @admin_events_router.callback_query(F.data.startswith("event_full:")) async def event_full(callback: types.CallbackQuery, session: AsyncSession): # –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: event_full:{id}:{page} _, event_id, page = callback.data.split(":") event_id = int(event_id) page = int(page) event = await orm_get_event(session, event_id) if not event: await callback.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True) return await send_entity_full( callback, event, back_cb=f"events_page:{page}" # <‚Äî —Å—é–¥–∞ –≤–µ—Ä–Ω—ë–º—Å—è ) # --- –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è --- @admin_events_router.callback_query(F.data == "update_all_events") async def update_all_events_handler(callback: CallbackQuery, session: AsyncSession): await callback.message.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–æ–±—ã—Ç–∏—è... –ü–æ–¥–æ–∂–¥–∏—Ç–µ ~1-2 –º–∏–Ω—É—Ç—ã") try: data, log_text = update_all_events() except Exception as e: await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}") return updated, added = 0, 0 from datetime import datetime for name, values in data.items(): try: event_date, description, img, link = values except ValueError: await callback.message.answer(f"‚ö† –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {name}") continue event = await orm_query.orm_get_event_by_name(session, name) if event: await orm_update_event(session, event.id, { "date": datetime.strptime(event_date, "%Y-%m-%d %H:%M"), "description": description, "img": img, "link": link }) updated += 1 else: await orm_add_event(session, { "name": name, "date": datetime.strptime(event_date, "%Y-%m-%d %H:%M"), "description": description, "img": img, "link": link }) added += 1 await callback.message.answer( f"{log_text}\n\n" f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}\n" f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}", reply_markup=get_admin_events_kb() )
1