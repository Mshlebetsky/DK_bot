import asyncio
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import or_f, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from sqlalchemy.ext.asyncio import AsyncSession
from database.orm_query import (
    orm_add_studio,
    orm_update_studio,
    orm_delete_studio,
    orm_get_studios,
    orm_get_studio_by_name, orm_get_studio,
)
from logic.helper import Big_litter_start
from logic.scrap_studios import update_all_studios
from filter.filter import IsSuperAdmin, IsEditor

# ================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==================

logger = logging.getLogger(__name__)

# ================== –†–û–£–¢–ï–† ==================


admin_studios_router = Router()
admin_studios_router.message.filter(or_f(IsSuperAdmin(), IsEditor()))


# --- FSM States ---
class AddStudioFSM(StatesGroup):
    name = State()
    description = State()
    teacher = State()
    cost = State()
    age = State()
    category = State()
    qr_img = State()
    img = State()


class EditStudioFSM(StatesGroup):
    id = State()
    field = State()
    value = State()


class DeleteStudioFSM(StatesGroup):
    id = State()


# --- Keyboards ---
def get_admin_studios_kb() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–∏—è–º–∏"""
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–∏—é", callback_data="add_studio")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—É–¥–∏—é", callback_data="edit_studio")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–∏—é", callback_data="delete_studio")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å—Ç—É–¥–∏–∏", callback_data="update_all_studios")],
        # [InlineKeyboardButton(text="C–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë", callback_data="delete_all_unlocked")],
        [InlineKeyboardButton(text="üõ† –í –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


PER_PAGE = 10  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

def get_studios_keyboard(studios, page: int = 0):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Ç—É–¥–∏—è–º–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""

    studios = sorted(studios, key=lambda s: s.name.lower())

    builder = InlineKeyboardBuilder()
    start = page * PER_PAGE
    end = start + PER_PAGE
    for st in studios[start:end]:
        builder.button(text=(Big_litter_start(st.name) if st.title =='' else st.title), callback_data=f"edit_studio_{st.id}")
    builder.button(text="üõ†–í –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data=f"edit_studios_panel")
    builder.adjust(1)

    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    if page > 0:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"studios_page_{page-1}")
    if end < len(studios):
        builder.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"studios_page_{page+1}")

    return builder.as_markup()


def get_delete_studios_keyboard(studios, page: int = 0):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—É–¥–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    studios = sorted(studios, key=lambda s: s.name.lower())

    builder = InlineKeyboardBuilder()
    start = page * PER_PAGE
    end = start + PER_PAGE
    builder.button(text="üî•–£–¥–∞–ª–∏—Ç—å –≤—Å—ë, –∫—Ä–æ–º–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö", callback_data=f"delete_all_studios")
    for st in studios[start:end]:
        builder.button(
            text=f"üóë {st.name}",
            callback_data=f"delete_studio_{st.id}"
        )
    builder.button(text="–í –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data=f"edit_studios_panel")
    builder.adjust(1)

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if page > 0:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"delete_page_{page-1}")
    if end < len(studios):
        builder.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"delete_page_{page+1}")

    return builder.as_markup()

def back_kb():
    return InlineKeyboardMarkup(inline_keyboard=[[

        InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",callback_data="edit_studios_panel")
    ]])


# --- Admin Panel ---
@admin_studios_router.message(Command("edit_studios"))
async def admin_studios_menu(message: Message):
    """–í—ã–≤–æ–¥ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–∏—è–º–∏"""
    logger.info("–û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–∏—è–º–∏ (user_id=%s)", message.from_user.id)
    await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–∏—è–º–∏:", reply_markup=get_admin_studios_kb())


@admin_studios_router.callback_query(F.data == "edit_studios_panel")
async def admin_studios_panel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–∏—è–º–∏ (user_id=%s)", callback.from_user.id)
    await callback.message.edit_text("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–∏—è–º–∏:", reply_markup=get_admin_studios_kb())


# --- Add Studio ---
@admin_studios_router.callback_query(F.data == "add_studio")
async def add_studio_start(callback: CallbackQuery, state: FSMContext):
    logger.info("–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–∏–∏ (user_id=%s)", callback.from_user.id)
    await state.set_state(AddStudioFSM.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—É–¥–∏–∏:", reply_markup=back_kb())


@admin_studios_router.message(AddStudioFSM.name)
async def add_studio_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    logger.debug("–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—É–¥–∏–∏: %s", message.text)
    await state.set_state(AddStudioFSM.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—É–¥–∏–∏:", reply_markup=back_kb())


@admin_studios_router.message(AddStudioFSM.description)
async def add_studio_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    logger.debug("–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—É–¥–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    await state.set_state(AddStudioFSM.teacher)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):", reply_markup=back_kb())


@admin_studios_router.message(AddStudioFSM.teacher)
async def add_studio_teacher(message: Message, state: FSMContext):
    await state.update_data(teacher=message.text)
    logger.debug("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: %s", message.text)
    await state.set_state(AddStudioFSM.cost)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å (0 –µ—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ):", reply_markup=back_kb())


@admin_studios_router.message(AddStudioFSM.cost)
async def add_studio_cost(message: Message, state: FSMContext):
    try:
        cost = int(message.text)
        await state.update_data(cost=cost)
        logger.debug("–°—Ç–æ–∏–º–æ—Å—Ç—å: %d", cost)
    except ValueError:
        logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: %s", message.text)
        await message.answer("‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    await state.set_state(AddStudioFSM.age)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, '6-12'):", reply_markup=back_kb())


@admin_studios_router.message(AddStudioFSM.age)
async def add_studio_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    logger.debug("–í–æ–∑—Ä–∞—Å—Ç: %s", message.text)
    await state.set_state(AddStudioFSM.category)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç—É–¥–∏–∏:", reply_markup=back_kb())


@admin_studios_router.message(AddStudioFSM.category)
async def add_studio_category(message: Message, state: FSMContext):
    await state.update_data(category=message.text.lower())
    logger.debug("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s", message.text.lower())
    await state.set_state(AddStudioFSM.qr_img)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ QR-–∫–∞—Ä—Ç–∏–Ω–∫—É (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):", reply_markup=back_kb())


@admin_studios_router.message(AddStudioFSM.qr_img)
async def add_studio_qr_img(message: Message, state: FSMContext):
    qr_img = None if message.text == "-" else message.text
    await state.update_data(qr_img=qr_img)
    logger.debug("QR-img: %s", qr_img)
    await state.set_state(AddStudioFSM.img)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—É–¥–∏–∏ (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):", reply_markup=back_kb())


@admin_studios_router.message(AddStudioFSM.img)
async def add_studio_img(message: Message, state: FSMContext, session: AsyncSession):
    img = None if message.text == "-" else message.text
    await state.update_data(img=img)
    data = await state.get_data()

    try:
        await orm_add_studio(session, data)
        logger.info("–°—Ç—É–¥–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: %s", data.get("title"))
        await message.answer("‚úÖ –°—Ç—É–¥–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_admin_studios_kb())
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–∏–∏: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–∏–∏.")
    finally:
        await state.clear()


# --- Edit Studio ---
@admin_studios_router.callback_query(F.data == "edit_studio")
async def edit_studio_start(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    studios = await orm_get_studios(session)
    if not studios:
        await callback.message.answer("‚ùå –ù–µ—Ç —Å—Ç—É–¥–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–∏ –ª–∏—Å—Ç–∞–Ω–∏–∏ –Ω–µ —Ö–æ–¥–∏—Ç—å –≤ –ë–î
    await state.update_data(studios=[{"id": s.id, "name": s.name} for s in studios])

    kb = get_studios_keyboard(studios, page=0)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)


@admin_studios_router.callback_query(F.data.startswith("studios_page_"))
async def studios_page(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    studios = [type("Obj", (), s) for s in data["studios"]]  # –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º dict –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã
    page = int(callback.data.split("_")[-1])
    kb = get_studios_keyboard(studios, page=page)
    await callback.message.edit_reply_markup(reply_markup=kb)


@admin_studios_router.callback_query(F.data.startswith("edit_studio_"))
async def edit_studio_choose(callback: CallbackQuery, state: FSMContext):
    studio_id = int(callback.data.split("_")[2])
    await state.update_data(id=studio_id)
    await state.set_state(EditStudioFSM.field)
    logger.info("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–∏–∏ id=%s", studio_id)

    buttons = [
        [InlineKeyboardButton(text=label, callback_data=f"field_{field}")]
        for label, field in [
            ("–ù–∞–∑–≤–∞–Ω–∏–µ", "title"),
            ("–û–ø–∏—Å–∞–Ω–∏–µ", "description"),
            ("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", "teacher"),
            ("–°—Ç–æ–∏–º–æ—Å—Ç—å", "cost"),
            ("–í–æ–∑—Ä–∞—Å—Ç", "age"),
            ("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "category"),
            ("QR", "qr_img"),
            ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "img"),
            ("–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—É–¥–∏–∏(–¥–∞/–Ω–µ—Ç)", "lock_changes"),
        ]
    ]

    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    buttons.append(
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"edit_studio")]
    )
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=kb)


@admin_studios_router.callback_query(F.data.startswith("field_"), EditStudioFSM.field)
async def edit_studio_field(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    field = callback.data.replace("field_", "")
    await state.update_data(field=field)
    await state.set_state(EditStudioFSM.value)

    data = await state.get_data()
    event = await orm_get_studio(session, data["id"])
    if field != 'title':
        current_value = getattr(event, field, None)
    else:
        if event.title == '':
            current_value = Big_litter_start(getattr(event, 'name', None))
        else:
            current_value = getattr(event, 'title', None)

    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è {field}:\n"
                                  f"{'–í–≤–µ–¥–∏—Ç–µ - —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è' if field == 'title' else ''}"
                                  f"\n–ó–Ω–∞—á–µ–Ω–∏–µ —Å–µ–π—á–∞—Å:")
    await callback.message.answer(f"{current_value}")
    logger.debug("–í—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: %s", field)


@admin_studios_router.message(EditStudioFSM.value)
async def edit_studio_value(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    field, value, studio_id = data["field"], message.text, data["id"]


    if message.text == "-":
        value = ''
    if field == "lock_changes":
        value = value.lower() in ["–¥–∞", "yes", 1, "True"]
    if field == "cost":
        try:
            value = int(value)
        except ValueError:
            logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: %s", message.text)
            await message.answer("‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
            return

    try:
        await orm_update_studio(session, studio_id, "lock_changes", True)
        await orm_update_studio(session, studio_id, field, value)
        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ %s —É —Å—Ç—É–¥–∏–∏ id=%s", field, studio_id)
        await message.answer("‚úÖ –°—Ç—É–¥–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!", reply_markup=get_admin_studios_kb())
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–∏–∏ id=%s: %s", studio_id, e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–∏–∏.")
    finally:
        await state.clear()


# --- Delete Studio ---
@admin_studios_router.callback_query(F.data == "delete_studio")
async def delete_studio_start(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    studios = await orm_get_studios(session)
    if not studios:
        await callback.message.answer("‚ùå –ù–µ—Ç —Å—Ç—É–¥–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ state
    await state.update_data(delete_studios=[{"id": s.id, "name": s.name} for s in studios])

    kb = get_delete_studios_keyboard(studios, page=0)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)


@admin_studios_router.callback_query(F.data.startswith("delete_page_"))
async def delete_studios_page(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    studios = [type("Obj", (), s) for s in data["delete_studios"]]  # –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
    page = int(callback.data.split("_")[-1])

    kb = get_delete_studios_keyboard(studios, page=page)
    await callback.message.edit_reply_markup(reply_markup=kb)



@admin_studios_router.callback_query(F.data.startswith("delete_studio_"))
async def delete_studio_confirm(callback: CallbackQuery, session: AsyncSession):
    studio_id = int(callback.data.split("_")[2])
    try:
        await orm_delete_studio(session, studio_id)
        logger.info("–£–¥–∞–ª–µ–Ω–∞ —Å—Ç—É–¥–∏—è id=%s", studio_id)
        await callback.message.answer("üóë –°—Ç—É–¥–∏—è —É–¥–∞–ª–µ–Ω–∞!", reply_markup=get_admin_studios_kb())
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–∏–∏ id=%s: %s", studio_id, e)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–∏–∏.")


# --- Update All Studios ---
@admin_studios_router.callback_query(F.data == "update_all_studios")
async def update_all_studios_handler(callback: CallbackQuery, session: AsyncSession):
    logger.info("–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç—É–¥–∏–π (user_id=%s)", callback.from_user.id)
    await callback.message.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–∏–π... (~4 –º–∏–Ω—É—Ç—ã)")

    try:
        data, log_text = await asyncio.to_thread(update_all_studios)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –ø–∞—Ä—Å–µ—Ä–∞ —Å—Ç—É–¥–∏–π: %s", e)
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return




    updated, added = 0, 0

    for name, values in data.items():
        try:
            description, cost, second_cost, age, img, qr_img, teacher, category = values
        except ValueError:
            logger.warning("–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—É–¥–∏—è %s: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", name)
            await callback.message.answer(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—É–¥–∏—è {name}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            continue

        try:
            studios = await orm_get_studios(session)
            studio = await orm_get_studio_by_name(session, name)
            if studio:
                if (studio.lock_changes == False):
                    try:
                        await orm_delete_studio(session, studio.id)
                    except Exception as e:
                        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–∏–∏ id=%s: %s", studio.id, e)

                    new_data = {
                        "name": name,
                        "description": description,
                        "teacher": teacher,
                        "cost": int(cost),
                        "second_cost": second_cost,
                        "age": age,
                        "category": category,
                        "qr_img": qr_img,
                        "img": img,
                    }
                    await orm_add_studio(session, new_data)
                    updated += 1
                    logger.debug("–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—É–¥–∏—è %s", name)
            else:
                new_data = {
                    "name": name,
                    "description": description,
                    "teacher": teacher,
                    "cost": int(cost),
                    "second_cost": second_cost,
                    "age": age,
                    "category": category,
                    "qr_img": qr_img,
                    "img": img,
                }
                await orm_add_studio(session, new_data)
                added += 1
                logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—É–¥–∏—è %s", name)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—É–¥–∏–∏ %s: %s", name, e)

    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–Ω–æ–≤–ª–µ–Ω–æ=%d, –î–æ–±–∞–≤–ª–µ–Ω–æ=%d", updated, added)
    await callback.message.answer(
        f"{log_text}\n\n"
        f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}\n"
        f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}",
        reply_markup=get_admin_studios_kb()
    )


@admin_studios_router.callback_query(F.data == "delete_all_studios")
async def delete_all_studios_handler(callback: CallbackQuery, session: AsyncSession):

    try:
        studios = await orm_get_studios(session)
        deleted_count = 0

        for st in studios:
            # —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ lock_changes == False (–∏–ª–∏ None)
            if not getattr(st, "lock_changes", False):
                try:
                    await orm_delete_studio(session, st.id)
                    deleted_count += 1
                except Exception as e:
                    # –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
                    logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–∏–∏ id=%s: %s", st.id, e)

        await callback.message.answer(
            f"üóë –£–¥–∞–ª–µ–Ω–æ —Å—Ç—É–¥–∏–π: {deleted_count}\n"
            f"‚úÖ –ó–∞—â–∏—â—ë–Ω–Ω—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ –º–µ—Å—Ç–µ.", reply_markup=back_kb()
        )
    except:
        logger.info("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–∏–∏")
