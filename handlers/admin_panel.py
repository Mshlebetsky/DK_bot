from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from aiogram.filters import  Command, or_f
from aiogram import Router, types, F
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete
from filter.filter import ChatTypeFilter, IsAdmin, check_message, get_admins_ids

from data.text import admin_welcome
from database.models import Admin
from filter.filter import IsSuperAdmin


admin_router = Router()
admin_router.message.filter(ChatTypeFilter(['private']),IsAdmin())


def admin_panel_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ê—Ñ–∏—à—É', callback_data="edit_events_panel")],
        [InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –°—Ç—É–¥–∏–∏', callback_data="edit_studios_panel")],
        [InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ù–æ–≤–æ—Å—Ç–∏', callback_data="edit_news_panel")],
        [InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', callback_data="manage_editors")],
        [InlineKeyboardButton(text="üè† –í –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]

    ])



@admin_router.message(or_f(Command('admin_panel'), (lambda msg: msg.text == "üõ†–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")))
async def admin_panel(message: types.Message):
    await message.answer(f'{admin_welcome}', reply_markup=admin_panel_menu())


@admin_router.callback_query(F.data == 'admin_panel')
async def admin_menu2(callback : CallbackQuery):
    await callback.message.edit_text(admin_welcome, reply_markup=admin_panel_menu())


admin_manage_router = Router()


@admin_manage_router.callback_query(F.data == "manage_editors", IsSuperAdmin())
async def manage_editors(callback: CallbackQuery, session: AsyncSession):
    editors = (await session.execute(select(Admin))).scalars().all()
    text = "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞–º–∏:\n\n"
    for ed in editors:
        text += f"‚Ä¢ {ed.user_id} ({ed.role})\n"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞", callback_data="add_editor")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞", callback_data="remove_editor")],
        [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])
    await callback.message.edit_text(text, reply_markup=kb)


@admin_manage_router.callback_query(F.data == "add_editor", IsSuperAdmin())
async def add_editor(callback: CallbackQuery):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º.")
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM (–Ω–∞–¥–æ –∑–∞–≤–µ—Å—Ç–∏ —Å—Ç–µ–π—Ç-–º–∞—à–∏–Ω—É)


@admin_manage_router.callback_query(F.data == "remove_editor", IsSuperAdmin())
async def remove_editor(callback: CallbackQuery):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤.")
    # —Ç–æ–∂–µ FSM


from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

class EditorFSM(StatesGroup):
    add_id = State()
    remove_id = State()


@admin_manage_router.message(EditorFSM.add_id, IsSuperAdmin())
async def editor_add_handler(message: types.Message, state: FSMContext, session: AsyncSession):
    try:
        user_id = int(message.text)
        session.add(Admin(user_id=user_id, role="editor"))
        await session.commit()
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await state.clear()


@admin_manage_router.message(EditorFSM.remove_id, IsSuperAdmin())
async def editor_remove_handler(message: types.Message, state: FSMContext, session: AsyncSession):
    try:
        user_id = int(message.text)
        await session.execute(delete(Admin).where(Admin.user_id == user_id))
        await session.commit()
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await state.clear()
