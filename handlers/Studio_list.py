from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func

from database.models import Studios
from database.orm_query import orm_get_studio


studios_router = Router()

STUDIOS_PER_PAGE = 8

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def get_studios_keyboard(studios, page: int, total_pages: int):
    keyboard = [
        [InlineKeyboardButton(
            text=f"{'üÜì' if studio.cost == 0 else 'üí≥'} {studio.name.capitalize()}",
            callback_data=f"studio_card:{studio.id}:{page}"
        )]
        for studio in studios
    ]

    nav_buttons = []
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(text="‚èÆ –ù–∞–∑–∞–¥", callback_data=f"studios_page:{page-1}")
        )
    if page < total_pages:
        nav_buttons.append(
            InlineKeyboardButton(text="‚è≠ –î–∞–ª–µ–µ", callback_data=f"studios_page:{page+1}")
        )
    if nav_buttons:
        keyboard.append(nav_buttons)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_studio_card_keyboard(studio_id: int, page: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"studios_page:{page}")],
        [InlineKeyboardButton(text="‚Ñπ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"studio_detail:{studio_id}:{page}")]
    ])


def get_studio_detail_keyboard(studio: Studios, page: int, photo_msg_id: int = 0):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏"""
    buttons = [
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=f"studio_back:{studio.id}:{page}:{photo_msg_id}"
        )],
        [InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://–¥–∫-—è—É–∑–∞.—Ä—Ñ/studii/")],
        [InlineKeyboardButton(text="üñç –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∫—Ä—É–∂–æ–∫", url="https://dk.mosreg.ru/")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# ---------- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------
async def render_studio_list(message_or_callback, session: AsyncSession, page: int = 1):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–∏–π"""
    offset = (page - 1) * STUDIOS_PER_PAGE
    studios = (
        await session.execute(
            select(Studios).offset(offset).limit(STUDIOS_PER_PAGE)
        )
    ).scalars().all()

    total = (await session.execute(select(func.count(Studios.id)))).scalar_one()
    total_pages = (total + STUDIOS_PER_PAGE - 1) // STUDIOS_PER_PAGE

    text = "üìã <b>–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–∏–π:</b>\n\n"
    keyboard = get_studios_keyboard(studios, page, total_pages)

    target = message_or_callback.message if isinstance(message_or_callback, CallbackQuery) else message_or_callback

    if not studios:
        if isinstance(message_or_callback, CallbackQuery):
            await message_or_callback.message.delete()  # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            await message_or_callback.message.answer("‚ùå–°—Ç—É–¥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            await message_or_callback.answer("‚ùå–°—Ç—É–¥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    try:
        if target.text:
            await target.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        else:
            await target.delete()
            await target.answer(text, reply_markup=keyboard, parse_mode="HTML")
    except Exception:
        await target.answer(text, reply_markup=keyboard, parse_mode="HTML")

    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.answer()


# --- –ö—Ä–∞—Ç–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ ---
async def render_studio_card(callback: CallbackQuery, studio: Studios, page: int):
    description = studio.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
    short_desc = description[:350] + ("<i>‚Ä¶ \n\n–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>\"–ü–æ–¥—Ä–æ–±–Ω–µ–µ\"</b> —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–æ–ª—å—à–µ –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è</i>" if len(description) > 350 else "")

    text = f"<b>{studio.name}</b>\n\n{short_desc}"
    text = (
        f"<b>{studio.name}</b>\n\n"
        f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {studio.teacher or '‚Äî'}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {studio.cost} —Ä—É–±.\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {studio.age}\n"
        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {studio.category if studio.category != 'unknown' else '–î—Ä—É–≥–æ–µ'}\n"
        # f"‚è± –û–±–Ω–æ–≤–ª–µ–Ω–æ: {studio.updated}\n\n"
        f"‚ÑπÔ∏è {short_desc or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"studios_page:{page}")],
        [InlineKeyboardButton(text="‚Ñπ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"studio_detail:{studio.id}:{page}")]
    ])

    # –£–¥–∞–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    try:
        await callback.message.delete()
    except Exception:
        pass

    # –ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å —Ñ–æ—Ç–æ
    if studio.img:
        await callback.message.answer_photo(studio.img, caption=text[:1024], reply_markup=kb, parse_mode="HTML")
    else:
        await callback.message.answer(text[:4095], reply_markup=kb, parse_mode="HTML")

    await callback.answer()


# --- –î–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ ---
async def render_studio_detail(callback: CallbackQuery, studio: Studios, page: int):
    text = (
        f"<b>{studio.name}</b>\n\n"
        f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {studio.teacher or '‚Äî'}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {studio.cost} —Ä—É–±.\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {studio.age}\n"
        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {studio.category}\n"
        # f"‚è± –û–±–Ω–æ–≤–ª–µ–Ω–æ: {studio.updated}\n\n"
        f"‚ÑπÔ∏è {studio.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"studio_card:{studio.id}:{page}")],
        [InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://–¥–∫-—è—É–∑–∞.—Ä—Ñ/studii/")],
        [InlineKeyboardButton(text="üñç –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∫—Ä—É–∂–æ–∫", url="https://dk.mosreg.ru/")]
    ])

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–µ–Ω—è–µ–º —Ñ–æ—Ç–æ/—Ç–µ–∫—Å—Ç –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ)
    try:
        if callback.message.photo:
            await callback.message.delete()  # –µ—Å–ª–∏ –±—ã–ª–æ —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º
            await callback.message.answer(text[:4095], reply_markup=kb, parse_mode="HTML")
        else:
            await callback.message.edit_text(text[:4095], reply_markup=kb, parse_mode="HTML")
    except Exception:
        await callback.message.answer(text[:4095], reply_markup=kb, parse_mode="HTML")

    await callback.answer()



# --- –ù–∞–∑–∞–¥ –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫ –∫—Ä–∞—Ç–∫–æ–π ---
# @studios_router.callback_query(F.data.startswith("studio_back_card:"))
# async def back_to_card(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
#     data = await state.get_data()
#     studio_id, page = map(int, callback.data.split(":")[1:])
#     studio = await orm_get_studio(session, studio_id)
#
#     # –£–¥–∞–ª—è–µ–º –≤—Å–µ detail-—Å–æ–æ–±—â–µ–Ω–∏—è
#     for msg_id in data.get("detail_msg_ids", []):
#         try:
#             await callback.bot.delete_message(callback.message.chat.id, msg_id)
#         except Exception:
#             pass
#
#     await render_studio_card(callback, studio, page, state)


# --- –ù–∞–∑–∞–¥ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å–ø–∏—Å–æ–∫ ---
@studios_router.callback_query(F.data.startswith("studios_page:"))
async def back_to_list(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    card_msg_id = data.get("card_msg_id")
    if card_msg_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, card_msg_id)
        except Exception:
            pass
    page = int(callback.data.split(":")[1])
    await render_studio_list(callback, session, page)


# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------
@studios_router.callback_query(F.data == "list_studios")
async def list_studios_handler(callback: CallbackQuery, session: AsyncSession):
    await render_studio_list(callback, session, page=1)


@studios_router.callback_query(F.data.startswith("studios_page:"))
async def studios_page_handler(callback: CallbackQuery, session: AsyncSession):
    page = int(callback.data.split(":")[1])
    await render_studio_list(callback, session, page)


from aiogram.fsm.context import FSMContext

@studios_router.callback_query(F.data.startswith("studio_card:"))
async def studio_card_handler(callback: CallbackQuery, session: AsyncSession):
    studio_id, page = map(int, callback.data.split(":")[1:])
    studio = await orm_get_studio(session, studio_id)
    if not studio:
        await callback.answer("–°—Ç—É–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    await render_studio_card(callback, studio, page)


@studios_router.callback_query(F.data.startswith("studio_detail:"))
async def studio_detail_handler(callback: CallbackQuery, session: AsyncSession):
    studio_id, page = map(int, callback.data.split(":")[1:])
    studio = await orm_get_studio(session, studio_id)
    if not studio:
        await callback.answer("–°—Ç—É–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    await render_studio_detail(callback, studio, page)


@studios_router.callback_query(F.data.startswith("studio_back:"))
async def studio_back_handler(callback: CallbackQuery, session: AsyncSession):
    studio_id, page, photo_msg_id = map(int, callback.data.split(":")[1:])

    # üóë —É–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ)
    if photo_msg_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, photo_msg_id)
        except Exception:
            pass

    studio = await orm_get_studio(session, studio_id)
    if studio:
        await render_studio_card(callback, studio, page)
    else:
        await callback.answer("–°—Ç—É–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
