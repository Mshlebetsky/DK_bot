import hashlib
import logging
import re

from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.utils.callback_answer import CallbackAnswer
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func

from database.models import Studios
from database.orm_query import orm_get_studio
from logic.helper import Big_litter_start


logger = logging.getLogger(__name__)
studios_router = Router()


STUDIOS_PER_PAGE = 8
CATEGORY_MAP: dict[str, str] = {}


# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------


def short_code(text: str) -> str:
    return hashlib.md5(text.encode()).hexdigest()[:6]


def sort_key(studio):
    name = studio.title if studio.title else studio.name
    return re.sub(r"[\"'¬´¬ª‚Äò‚Äô]", "", name).lower()


# --------- –†–µ–Ω–¥–µ—Ä—ã —Å–ø–∏—Å–∫–∞/–∫—Ä–∞—Ç–∫–æ–π –∏ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç—É–¥–∏–π


async def render_studio_list(callback: CallbackQuery, session: AsyncSession,
                              is_free: bool, category: str | None, page: int = 1):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–∏–π —Å —É—á—ë—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞ "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ / –ø–ª–∞—Ç–Ω—ã–µ".
    """
    # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ ‚Äî cost == 0, –ø–ª–∞—Ç–Ω—ã–µ ‚Äî cost > 0
    if is_free:
        cost_filter = (Studios.cost == 0)
    else:
        cost_filter = (Studios.cost > 0)

    # –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ offset/limit
    query = select(Studios).where(cost_filter)
    if category:
        query = query.where(Studios.category == category)

    # –¥–æ—Å—Ç–∞—ë–º –≤—Å–µ —Å—Ç—É–¥–∏–∏
    studios = (await session.execute(query)).scalars().all()

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
    sorted_studios = sorted(studios, key=sort_key)

    # —Å—á–∏—Ç–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    total = len(sorted_studios)
    total_pages = max((total + STUDIOS_PER_PAGE - 1) // STUDIOS_PER_PAGE, 1)

    # –Ω–∞—Ä–µ–∑–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    start = (page - 1) * STUDIOS_PER_PAGE
    end = start + STUDIOS_PER_PAGE
    page_studios = sorted_studios[start:end]

    if not page_studios:
        kb_back = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚¨Ö –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"studios_free_{is_free}")
        ]])
        await callback.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç—É–¥–∏–π", reply_markup=kb_back)
        await callback.answer()
        return

    text = f"üìã <b>–°–ø–∏—Å–æ–∫ {'–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö' if is_free else '–ø–ª–∞—Ç–Ω—ã—Ö'} —Å—Ç—É–¥–∏–π</b>\n"
    if category:
        text += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.capitalize()}\n\n"

    # —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ page_studios
    keyboard = [
        [InlineKeyboardButton(
            text=f"{'üÜì' if studio.cost == 0 else 'üí≥'} "
                 f"{Big_litter_start(studio.name) if studio.title == '' else studio.title}",
            callback_data=f"studio_card:{studio.id}:{page}_{callback.data}"
        )]
        for studio in page_studios
    ]


    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    query = callback.data.split(":")[-1]
    nav = []
    if page > 1:
        nav.append(InlineKeyboardButton(text="‚èÆ –ù–∞–∑–∞–¥", callback_data=f"std_p:{page - 1}:{query}"))
        logger.debug(callback.data)
    if page < total_pages:
        nav.append(InlineKeyboardButton(text="‚è≠ –î–∞–ª–µ–µ", callback_data=f"std_p:{page + 1}:{query}"))
        logger.debug(callback.data)
    if nav:
        keyboard.append(nav)

    keyboard.append([InlineKeyboardButton(text="‚¨Ö –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"studios_free_{is_free}")])
    keyboard.append([InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    std_list_kb = InlineKeyboardMarkup(inline_keyboard=keyboard)

    if category != None:
        logger.info(f"{callback.data}")
        try:
            await callback.message.edit_text(
                f"üìã {'–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ' if is_free else '–ü–ª–∞—Ç–Ω—ã–µ'} —Å—Ç—É–¥–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category.capitalize() if category != 'unknown' else '–î—Ä—É–≥–æ–µ'}</b>:",
                reply_markup=std_list_kb
            )
        except:
            await callback.message.answer(
                f"üìã {'–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ' if is_free else '–ü–ª–∞—Ç–Ω—ã–µ'} —Å—Ç—É–¥–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category.capitalize() if category != 'unknown' else '–î—Ä—É–≥–æ–µ'}</b>:",
                reply_markup=std_list_kb
            )
    else:
        try:
            await callback.message.edit_text(
                f"üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö <b>{'–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö' if is_free else '–ø–ª–∞—Ç–Ω—ã—Ö'}</b> —Å—Ç—É–¥–∏–π:", reply_markup=std_list_kb
            )
        except:
            await callback.message.answer(
                f"üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö <b>{'–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö' if is_free else '–ø–ª–∞—Ç–Ω—ã—Ö'}</b> —Å—Ç—É–¥–∏–π:", reply_markup=std_list_kb
            )
        logger.info(f"{callback.data}")
    logger.info(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–∫—Ä—ã–ª —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ %s",
        callback.from_user.id,
        category,
    )
    await callback.answer()



async def render_studio_card(callback: CallbackQuery, studio, session: AsyncSession, data):
    description = studio.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
    short_desc = description[:350] + (
        "<i>‚Ä¶ \n\n–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>\"–ü–æ–¥—Ä–æ–±–Ω–µ–µ\"</b> —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–æ–ª—å—à–µ –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è</i>" if len(
            description) > 350 else "")

    text = f"<b>{studio.name if studio.title == '' else studio.title}</b>\n\n{short_desc}"
    second_cost = f"üë•–ì—Ä—É–ø–ø–æ–≤–æ–µ: {studio.second_cost} —Ä—É–±.'\n"
    text = (
        f"<b>{studio.name if studio.title == '' else studio.title}</b>\n\n"
        f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {studio.teacher or '‚Äî'}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {studio.cost} —Ä—É–±.\n{'' if (studio.second_cost == None) else second_cost}"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {studio.age}\n"
        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {studio.category if studio.category != 'unknown' else '–î—Ä—É–≥–æ–µ'}\n"
        f"‚ÑπÔ∏è {short_desc or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
    )
#studio_card:{studio.id}:{query}
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"{data[0]}")],
        [InlineKeyboardButton(text="üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", url="https://–¥–∫-—è—É–∑–∞.—Ä—Ñ/upload/rasp.docx")],
        [InlineKeyboardButton(text="üñç –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∫—Ä—É–∂–æ–∫", url="https://dk.mosreg.ru/")],
        [InlineKeyboardButton(text="‚Ñπ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"std_dl:{studio.id}:{data[0]}")]
    ])


    if studio.img:
        try:
            await callback.message.delete()
        except:
            pass
        await callback.message.answer_photo(studio.img, caption=f"{text}", reply_markup=kb)
    else:
        await callback.message.answer(text[:4095], reply_markup=kb, parse_mode="HTML")


async def render_studio_detail(callback: CallbackQuery, session: AsyncSession, studio, query):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"studio_card:{studio.id}:{query}")],
        [InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://–¥–∫-—è—É–∑–∞.—Ä—Ñ/studii/")],
        [InlineKeyboardButton(text="üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", url="https://–¥–∫-—è—É–∑–∞.—Ä—Ñ/upload/rasp.docx")],
        [InlineKeyboardButton(text="üñº QR", callback_data=f"qr:{studio.id}:{query}")],
        [InlineKeyboardButton(text="üñç –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∫—Ä—É–∂–æ–∫", url="https://dk.mosreg.ru/")]
    ])
    if studio.second_cost == None:
        prise = f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {studio.cost} —Ä—É–±.\n"
    else:
        prise =(f"üí∞–°—Ç–æ–∏–º–æ—Å—Ç—å: {studio.second_cost} —Ä—É–±.\n"
                f"üë•–ì—Ä—É–ø–ø–æ–≤–æ–µ: {studio.cost} —Ä—É–±.\n")
    text = (
        f"<b>{studio.name if studio.title == '' else studio.title}</b>\n\n"
        f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {studio.teacher or '‚Äî'}\n"
        f"{prise}"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {studio.age}\n"
        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {studio.category if studio.category != 'unknown' else '–î—Ä—É–≥–æ–µ'}\n"
        f"‚ÑπÔ∏è {studio.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
    )

    await callback.message.answer(text, reply_markup= kb)


# -----------–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---------------------


@studios_router.message(Command("studios"))
async def show_studios(message: types.Message):
    await start_studios(message)


@studios_router.callback_query(F.data == "studios")
async def studios_callback(callback: CallbackQuery):
    # –ø–µ—Ä–µ–¥–∞—ë–º message (–Ω–µ —Å–∞–º callback), —á—Ç–æ–±—ã start_fsm_studios –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –º–µ—Ç–æ–¥ answer/edit_text
    await start_studios(callback.message)


async def start_studios(target: types.Message):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —Å—Ç—É–¥–∏–∏ –ø–æ–∫–∞–∑–∞—Ç—å:"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ", callback_data="studios_free_True")],
            [InlineKeyboardButton(text="üí≥ –ü–ª–∞—Ç–Ω—ã–µ", callback_data="studios_free_False")],
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
    )
    try:
        await target.edit_text(text, reply_markup=kb)
    except Exception:
        await target.answer(text, reply_markup=kb)


@studios_router.callback_query(F.data.startswith("studios_free"))
async def choose_category(callback: CallbackQuery, session: AsyncSession):
    is_free = callback.data.endswith("True")

    # —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    result = await session.execute(select(Studios.category).distinct())
    categories = result.scalars().all()

    buttons = [
        [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data=f"std_list_{is_free}_all")]
    ]

    for category in categories:
        display = '–î—Ä—É–≥–æ–µ' if category == 'unknown' else (category or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        # –í callback_data –ø–µ—Ä–µ–¥–∞—ë–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–±–µ–∑ .lower()), —á—Ç–æ–±—ã —Ñ–∏–ª—å—Ç—Ä –±—ã–ª —Ç–æ—á–Ω—ã–º
        code = short_code(category)
        CATEGORY_MAP[code] = category  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
        buttons.append([
            InlineKeyboardButton(
                text=display.capitalize(),
                callback_data=f"std_list_{is_free}_{code}"
            )
        ])

    buttons.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="studios")])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(
        f"–°–ø–∏—Å–æ–∫ {'–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö' if is_free else '–ø–ª–∞—Ç–Ω—ã—Ö'} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å—Ç—É–¥–∏–π:",
        reply_markup=kb
    )
    await callback.answer()


# ---------- STEP 3: —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–∏–π ----------
@studios_router.callback_query(F.data.startswith("std_list_"))
async def std_list(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: std_list_{is_free}_<category_or_all>
    _, _, is_free_str, category = callback.data.split("_", 3)
    category = CATEGORY_MAP.get(category)
    is_free = is_free_str == "True"
    category = None if category == "all" else category
    try:
        await callback.message.delete()
    except:
        pass
    await render_studio_list(callback, session, is_free, category, page=1)


@studios_router.callback_query(F.data.startswith("std_p:"))
async def std_p(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    page = int(callback.data.split(":")[1])
    data = callback.data.split("_list_")[1]
    is_free, category = data.split('_')
    category = (None if category == 'all' else CATEGORY_MAP.get(category))
    await render_studio_list(callback, session, is_free == "True", category, page)


@studios_router.callback_query(F.data.startswith("studio_card:"))
async def studio_card(callback: CallbackQuery, session: AsyncSession, bot: Bot):

    logger.info(callback.data)
    card, back_mark = callback.data.split('std_list_')
    studio_id = card.split(":")[1]

    studio = await orm_get_studio(session, int(studio_id))
    back_mark = f"std_list_{back_mark}"
    data = [back_mark]

    await render_studio_card(callback,studio, session, data)

#studio_card:id_ page_callback_data
@studios_router.callback_query(F.data.startswith("std_dl:"))
async def studio_detail(callback: CallbackQuery, session: AsyncSession):
    studio_id = int(callback.data.split(":")[1])
    query = callback.data.split(":")[-1]
    studio = await orm_get_studio(session, studio_id)
    try:
        await callback.message.delete()
    except:
        pass
    await render_studio_detail(callback,session,studio,query)
    try:
        await callback.message.delete()
    except:
        pass


@studios_router.callback_query(F.data.startswith("qr:"))
async def studio_qr(callback: CallbackQuery, session: AsyncSession):
    studio_id = int(callback.data.split(":")[1])
    query = callback.data.split(":")[-1]
    studio = await orm_get_studio(session, studio_id)
    text = f"QR –∫–æ–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Å—Ç—É–¥–∏—é:\n<b>{studio.name if studio.title == '' else studio.title}</b>"
    to_studios_list_kb = InlineKeyboardMarkup(inline_keyboard=([[
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥",callback_data=f"studio_card:{studio.id}:{query}")
    ]]))
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer_photo(studio.qr_img, caption=text, reply_markup=to_studios_list_kb)
