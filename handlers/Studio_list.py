import logging
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func

from database.models import Studios
from database.orm_query import orm_get_studio
from logic.helper import Big_litter_start

# ================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==================

logger = logging.getLogger(__name__)

# ================== –†–û–£–¢–ï–† ==================


studios_router = Router()


STUDIOS_PER_PAGE = 8


# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def get_studios_keyboard(studios, page: int, total_pages: int) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–∏–π.
    """
    keyboard = [
        [InlineKeyboardButton(
            text=f"{'üÜì' if studio.cost == 0 else 'üí≥'} {Big_litter_start(studio.name)}",
            callback_data=f"studio_card:{studio.id}:{page}"
        )]
        for studio in studios
    ]

    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚èÆ –ù–∞–∑–∞–¥", callback_data=f"studios_page:{page - 1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="‚è≠ –î–∞–ª–µ–µ", callback_data=f"studios_page:{page + 1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)
        keyboard.append([InlineKeyboardButton(text="üè† –í –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_studio_card_keyboard(studio_id: int, page: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"studios_page:{page}")],
        [InlineKeyboardButton(text="‚Ñπ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"studio_detail:{studio_id}:{page}")],
    ])


def get_studio_detail_keyboard(studio: Studios, page: int, photo_msg_id: int = 0) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç—É–¥–∏–∏.
    """
    buttons = [
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"studio_back:{studio.id}:{page}:{photo_msg_id}")],
        [InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://–¥–∫-—è—É–∑–∞.—Ä—Ñ/studii/")],
        [InlineKeyboardButton(text="üñç –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∫—Ä—É–∂–æ–∫", url="https://dk.mosreg.ru/")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# ---------- –†–µ–Ω–¥–µ—Ä—ã ----------
async def render_studio_list(message_or_callback, session: AsyncSession, page: int = 1) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–∏–π.
    """

    offset = (page - 1) * STUDIOS_PER_PAGE
    studios = (
        await session.execute(
            select(Studios).offset(offset).limit(STUDIOS_PER_PAGE)
        )
    ).scalars().all()

    total = (await session.execute(select(func.count(Studios.id)))).scalar_one()
    total_pages = (total + STUDIOS_PER_PAGE - 1) // STUDIOS_PER_PAGE

    if not studios:
        logger.warning("–°—Ç—Ä–∞–Ω–∏—Ü–∞ %s –ø—É—Å—Ç–∞ ‚Äî —Å—Ç—É–¥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", page)
        if isinstance(message_or_callback, CallbackQuery):
            await message_or_callback.message.delete()
            await message_or_callback.message.answer("‚ùå –°—Ç—É–¥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            await message_or_callback.answer("‚ùå –°—Ç—É–¥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    text = "üìã <b>–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–∏–π:</b>\n\n"
    keyboard = get_studios_keyboard(studios, page, total_pages)
    target = message_or_callback.message if isinstance(message_or_callback, CallbackQuery) else message_or_callback

    try:
        if target.text:
            await target.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        else:
            await target.delete()
            await target.answer(text, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–∏–π: %s", e, exc_info=True)
        await target.answer(text, reply_markup=keyboard, parse_mode="HTML")

    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.answer()


async def render_studio_card(callback: CallbackQuery, studio: Studios, page: int) -> None:
    """
    –ö—Ä–∞—Ç–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç—É–¥–∏–∏.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å—Ç—É–¥–∏—é {studio.id}")

    description = studio.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
    short_desc = description[:350] + (
        "<i>‚Ä¶ \n\n–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>\"–ü–æ–¥—Ä–æ–±–Ω–µ–µ\"</b> —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–æ–ª—å—à–µ –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è</i>"
        if len(description) > 350 else ""
    )

    text = (
        f"<b>{studio.name}</b>\n\n"
        f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {studio.teacher or '‚Äî'}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {studio.cost} —Ä—É–±.\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {studio.age}\n"
        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {studio.category if studio.category != 'unknown' else '–î—Ä—É–≥–æ–µ'}\n"
        f"‚ÑπÔ∏è {short_desc or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
    )
    kb = get_studio_card_keyboard(studio.id, page)

    try:
        await callback.message.delete()
    except Exception as e:
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", e)

    try:
        if studio.img:
            await callback.message.answer_photo(studio.img, caption=text[:1024], reply_markup=kb, parse_mode="HTML")
        else:
            await callback.message.answer(text[:4095], reply_markup=kb, parse_mode="HTML")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç—É–¥–∏–∏ ID=%s: %s", studio.id, e, exc_info=True)

    await callback.answer()


async def render_studio_detail(callback: CallbackQuery, studio: Studios, page: int) -> None:
    """
    –ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç—É–¥–∏–∏.
    """
    logger.debug("–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç—É–¥–∏–∏. ID=%s, –°—Ç—Ä–∞–Ω–∏—Ü–∞=%s", studio.id, page)

    text = (
        f"<b>{studio.name}</b>\n\n"
        f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {studio.teacher or '‚Äî'}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {studio.cost} —Ä—É–±.\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {studio.age}\n"
        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {studio.category}\n"
        f"‚ÑπÔ∏è {studio.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
    )
    kb = get_studio_detail_keyboard(studio, page)

    try:
        if callback.message.photo:
            await callback.message.delete()
            await callback.message.answer(text[:4095], reply_markup=kb, parse_mode="HTML")
        else:
            await callback.message.edit_text(text[:4095], reply_markup=kb, parse_mode="HTML")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç—É–¥–∏–∏ ID=%s: %s", studio.id, e, exc_info=True)
        await callback.message.answer(text[:4095], reply_markup=kb, parse_mode="HTML")

    await callback.answer()


# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------
@studios_router.callback_query(F.data == "list_studios")
async def list_studios_handler(callback: CallbackQuery, session: AsyncSession):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–∏–π", callback.from_user.id)
    await render_studio_list(callback, session, page=1)


@studios_router.callback_query(F.data.startswith("studios_page:"))
async def studios_page_handler(callback: CallbackQuery, session: AsyncSession):
    page = int(callback.data.split(":")[1])
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É %s —Å—Ç—É–¥–∏–π", callback.from_user.id, page)
    await render_studio_list(callback, session, page)


@studios_router.callback_query(F.data.startswith("studio_card:"))
async def studio_card_handler(callback: CallbackQuery, session: AsyncSession):
    studio_id, page = map(int, callback.data.split(":")[1:])
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–∫—Ä—ã–ª –∫–∞—Ä—Ç–æ—á–∫—É —Å—Ç—É–¥–∏–∏ ID=%s", callback.from_user.id, studio_id)

    studio = await orm_get_studio(session, studio_id)
    if not studio:
        logger.warning("–°—Ç—É–¥–∏—è ID=%s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", studio_id)
        await callback.answer("–°—Ç—É–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    await render_studio_card(callback, studio, page)


@studios_router.callback_query(F.data.startswith("studio_detail:"))
async def studio_detail_handler(callback: CallbackQuery, session: AsyncSession):
    studio_id, page = map(int, callback.data.split(":")[1:])
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–∫—Ä—ã–ª –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å—Ç—É–¥–∏–∏ ID=%s", callback.from_user.id, studio_id)

    studio = await orm_get_studio(session, studio_id)
    if not studio:
        logger.warning("–°—Ç—É–¥–∏—è ID=%s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", studio_id)
        await callback.answer("–°—Ç—É–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    await render_studio_detail(callback, studio, page)


@studios_router.callback_query(F.data.startswith("studio_back:"))
async def studio_back_handler(callback: CallbackQuery, session: AsyncSession):
    studio_id, page, photo_msg_id = map(int, callback.data.split(":")[1:])
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç—É–¥–∏–∏ ID=%s –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É %s", callback.from_user.id, studio_id, page)

    if photo_msg_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, photo_msg_id)
        except Exception as e:
            logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ ID=%s: %s", photo_msg_id, e)

    studio = await orm_get_studio(session, studio_id)
    if studio:
        await render_studio_card(callback, studio, page)
    else:
        logger.warning("–°—Ç—É–¥–∏—è ID=%s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ", studio_id)
        await callback.answer("–°—Ç—É–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
