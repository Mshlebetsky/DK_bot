import asyncio
import logging
from dataclasses import field

from aiogram import Router, F, types, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import or_f, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from sqlalchemy.ext.asyncio import AsyncSession

from database import orm_query
from database.orm_query import (
    orm_add_news, orm_update_news, orm_delete_news,
    orm_get_all_news, orm_get_news
)
from handlers.notification import notify_subscribers
from logic.scrap_news import update_all_news
from filter.filter import IsSuperAdmin, IsEditor


# ================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==================

logger = logging.getLogger(__name__)

# ================== –†–û–£–¢–ï–† ==================


admin_news_router = Router()
admin_news_router.message.filter(or_f(IsSuperAdmin(), IsEditor()))


# --- FSM ---
class AddNewsFSM(StatesGroup):
    title = State()
    description = State()
    img = State()
    notify = State()


class EditNewsFSM(StatesGroup):
    id = State()
    field = State()
    value = State()


# --- Keyboards ---
def get_admin_news_kb() -> InlineKeyboardMarkup:
    """Returns admin panel keyboard for managing news."""
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data="add_news")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data="edit_news")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data="delete_news")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π", callback_data="list_news")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="update_all_news")],
        [InlineKeyboardButton(text="üõ† –í –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


PER_PAGE = 10

def get_news_keyboard(news_list, page: int = 0):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º."""
    news_list = sorted(news_list, key=lambda n: n.name.lower())
    builder = InlineKeyboardBuilder()
    start, end = page * PER_PAGE, page * PER_PAGE + PER_PAGE
    for n in news_list[start:end]:
        builder.button(text=n.name, callback_data=f"edit_news_{n.id}")
    builder.button(text="üõ†–í –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="edit_news_panel")
    builder.adjust(1)
    if page > 0:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"news_page_{page-1}")
    if end < len(news_list):
        builder.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"news_page_{page+1}")
    return builder.as_markup()

def get_delete_news_keyboard(news_list, page: int = 0):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º."""
    news_list = sorted(news_list, key=lambda n: n.name.lower())
    builder = InlineKeyboardBuilder()
    start, end = page * PER_PAGE, page * PER_PAGE + PER_PAGE
    for n in news_list[start:end]:
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å delete_news_item_ —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å pagination
        builder.button(text=f"üóë {n.name}", callback_data=f"delete_news_item_{n.id}")
    builder.button(text="–í –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="edit_news_panel")
    builder.adjust(1)
    if page > 0:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"delete_news_page_{page-1}")
    if end < len(news_list):
        builder.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"delete_news_page_{page+1}")
    return builder.as_markup()


# --- Start Menu ---
@admin_news_router.message(Command("edit_news"))
async def admin_news_menu(message: Message):
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏{message.from_user.id}")
    await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏:", reply_markup=get_admin_news_kb())


@admin_news_router.callback_query(F.data == "edit_news_panel")
async def admin_events_menu(callback: CallbackQuery):
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏ (user_id{callback.from_user.id})")
    await callback.message.edit_text("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏:", reply_markup=get_admin_news_kb())


# --- Add News ---
@admin_news_router.callback_query(F.data == "add_news")
async def add_news_start(callback: CallbackQuery, state: FSMContext):
    logger.info("Admin %s started adding news", callback.from_user.id)
    await state.set_state(AddNewsFSM.title)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:")


@admin_news_router.message(AddNewsFSM.title)
async def add_news_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    logger.debug("News title set: %s", message.text)
    await state.set_state(AddNewsFSM.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:")


@admin_news_router.message(AddNewsFSM.description)
async def add_news_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    logger.debug("News description set (len=%d)", len(message.text))
    await state.set_state(AddNewsFSM.img)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):")


@admin_news_router.message(AddNewsFSM.img)
async def add_news_img(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    img = None if message.text == "-" else message.text
    await state.update_data(img=img)
    data = await state.get_data()
    if not data.get("name"):
        data["name"] = data.get("title")
    await orm_add_news(session, data)
    logger.info("News added: %s", data["title"])

    await state.set_state(AddNewsFSM.notify)
    await message.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞! –•–æ—Ç–∏—Ç–µ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? (–î–∞/–Ω–µ—Ç)")


@admin_news_router.message(AddNewsFSM.notify)
async def add_news_announce(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    notify = message.text.lower() in ["yes", "–¥–∞", "1"]
    data = await state.get_data()

    if notify:
        text = f"\n<b>{data['title']}</b>\n\n{data['description'][:300]}..."
        await notify_subscribers(bot, session, f"üì∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö!\n\n{text}", data["img"], type_="news")
        logger.info("News notification sent for: %s", data["title"])
        await message.answer("üëç –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", reply_markup=get_admin_news_kb())
    else:
        logger.info("News added without notification: %s", data["title"])
        await message.answer("üëç –ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=get_admin_news_kb())

    await state.clear()


# --- Edit News ---
@admin_news_router.callback_query(F.data == "edit_news")
async def edit_news_start(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    news_list = await orm_get_all_news(session)
    if not news_list:
        await callback.message.answer("‚ùå –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return
    await state.update_data(news=[{"id": n.id, "name": n.name} for n in news_list])
    kb = get_news_keyboard(news_list, page=0)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å:", reply_markup=kb)


@admin_news_router.callback_query(F.data.startswith("news_page_"))
async def news_page(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    news_list = [type("Obj", (), n) for n in data["news"]]
    page = int(callback.data.split("_")[-1])
    kb = get_news_keyboard(news_list, page=page)
    await callback.message.edit_reply_markup(reply_markup=kb)



@admin_news_router.callback_query(F.data.startswith("edit_news_"))
async def edit_news_choose(callback: CallbackQuery, state: FSMContext):
    news_id = int(callback.data.split("_")[2])
    await state.update_data(id=news_id)
    logger.info("Admin %s chose news %d for editing", callback.from_user.id, news_id)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="field_title")],
        [InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="field_description")],
        [InlineKeyboardButton(text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="field_img")],
        [InlineKeyboardButton(text="–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏(–¥–∞/–Ω–µ—Ç)", callback_data="field_lock_changes")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"edit_news_panel")]
    ])
    await state.set_state(EditNewsFSM.field)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=kb)


@admin_news_router.callback_query(F.data.startswith("field_"), EditNewsFSM.field)
async def edit_news_field(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    field = callback.data.replace("field_", "")
    await state.update_data(field=field)
    await state.set_state(EditNewsFSM.value)

    data = await state.get_data()
    news = await orm_get_news(session, data["id"])
    if field != 'title':
        current_value = getattr(news, field, None)
    else:
        if news.title == '':
            current_value = getattr(news, 'name', None)
        else:
            current_value = getattr(news, 'title', None)

    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è {field}:\n"
                                  f"{'–í–≤–µ–¥–∏—Ç–µ - —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è' if field == 'title' else ''}"
                                  f"\n–ó–Ω–∞—á–µ–Ω–∏–µ —Å–µ–π—á–∞—Å:")
    await callback.message.answer(f"{current_value}")
    logger.debug("–í—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: %s", field)


@admin_news_router.message(EditNewsFSM.value)
async def edit_news_value(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    field, value, news_id = data["field"], message.text, data["id"]


    if message.text == "-":
        value = ''
    if field == "lock_changes":
        value = value.lower() in ["–¥–∞", "yes", 1, "True"]

    try:
        await orm_update_news(session, news_id, {field: value})
        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ %s —É –Ω–æ–≤–æ—Å—Ç–∏ id=%s", field, news_id)
        await message.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!", reply_markup=get_admin_news_kb())
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–∏–∏ id=%s: %s", news_id, e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–∏–∏.")
    finally:
        await state.clear()


# --- Delete News ---
@admin_news_router.callback_query(F.data == "delete_news")
async def delete_news_start(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    news_list = await orm_get_all_news(session)
    if not news_list:
        await callback.message.answer("‚ùå –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    await state.update_data(delete_news=[{"id": n.id, "name": n.name} for n in news_list])
    kb = get_delete_news_keyboard(news_list, page=0)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

@admin_news_router.callback_query(F.data.startswith("delete_news_page_"))
async def delete_news_page(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    news_list = [type("Obj", (), n) for n in data["delete_news"]]
    page = int(callback.data.split("_")[-1])
    kb = get_delete_news_keyboard(news_list, page=page)
    await callback.message.edit_reply_markup(reply_markup=kb)


@admin_news_router.callback_query(F.data.startswith("delete_news_item_"))
async def delete_news_confirm(callback: CallbackQuery, session: AsyncSession):
    try:
        news_id = int(callback.data.split("_")[-1])
    except (IndexError, ValueError):
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–∏.")
        return

    try:
        await orm_delete_news(session, news_id)
        logger.info("News %d deleted", news_id)
        await callback.message.answer("üóë –ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞!", reply_markup=get_admin_news_kb())
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ id=%s: %s", news_id, e)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.")



# --- Update All News ---
@admin_news_router.callback_query(F.data == "update_all_news")
async def update_all_news_handler_question(callback: CallbackQuery):
    question_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–° –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="update_all_news_True")],
        [InlineKeyboardButton(text="–ë–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="update_all_news_False")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="edit_news_panel")],
    ])
    await callback.message.answer("–û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?", reply_markup=question_kb)


@admin_news_router.callback_query(F.data.startswith("update_all_news_"))
async def update_all_news_handler(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    notify_users = callback.data.endswith("True")
    logger.info("Admin %s started updating all news (notify=%s)", callback.from_user.id, notify_users)

    await callback.message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ... (~1 –º–∏–Ω—É—Ç–∞)")

    try:
        data, log_text = await asyncio.to_thread(update_all_news)
    except Exception as e:
        logger.exception("News parser failed")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return

    updated, added = 0, 0
    for name, values in data.items():
        try:
            description, img = values
        except ValueError:
            logger.warning("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: %s", name)
            await callback.message.answer(f"‚ö† –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {name}")
            continue

        news = await orm_query.orm_get_news_by_name(session, name)
        if news:
            if news.lock_changes == False:
                await orm_update_news(session, news.id, {"description": description, "img": img})
                updated += 1
        else:
            await orm_add_news(session, {"name": name, "description": description, "img": img})
            added += 1
            if notify_users:
                await notify_subscribers(bot, session, f"üì∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö!\n\n{name.capitalize()}", img, type_="news")

    logger.info("News update completed: updated=%d, added=%d", updated, added)
    await callback.message.answer(
        f"{log_text}\n\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}",
        reply_markup=get_admin_news_kb()
    )