from aiogram import Router, F, types
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func

import asyncio
from database.models import Studios
from logic.scrap_studios import update_all_studios
from database.orm_query import (
    orm_add_studio,
    orm_update_studio,
    orm_delete_studio,
    orm_get_studios,
    orm_get_studio,
    orm_get_studio_by_name,
)
from logic.helper import close_item_card, send_item_card


admin_studios_router = Router()

# --- FSM ---
class AddStudioFSM(StatesGroup):
    name = State()
    description = State()
    teacher = State()
    cost = State()
    age = State()
    category = State()
    qr_img = State()
    img = State()


class EditStudioFSM(StatesGroup):
    id = State()
    field = State()
    value = State()


class DeleteStudioFSM(StatesGroup):
    id = State()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_admin_studios_kb():
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–∏—é", callback_data="add_studio")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—É–¥–∏—é", callback_data="edit_studio")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–∏—é", callback_data="delete_studio")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–∏–π", callback_data="list_studios")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å—Ç—É–¥–∏–∏", callback_data="update_all_studios")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# --- –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é ---
@admin_studios_router.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –°—Ç—É–¥–∏–∏")
async def admin_studios_menu(message: Message):
    await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–∏—è–º–∏:", reply_markup=get_admin_studios_kb())


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–∏–∏ ---
@admin_studios_router.callback_query(F.data == "add_studio")
async def add_studio_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddStudioFSM.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—É–¥–∏–∏:")


@admin_studios_router.message(AddStudioFSM.name)
async def add_studio_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddStudioFSM.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—É–¥–∏–∏:")


@admin_studios_router.message(AddStudioFSM.description)
async def add_studio_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddStudioFSM.teacher)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):")


@admin_studios_router.message(AddStudioFSM.teacher)
async def add_studio_teacher(message: Message, state: FSMContext):
    await state.update_data(teacher=message.text)
    await state.set_state(AddStudioFSM.cost)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å, –µ—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, —Ç–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ 0:")


@admin_studios_router.message(AddStudioFSM.cost)
async def add_studio_cost(message: Message, state: FSMContext):
    try:
        cost = int(message.text)
    except ValueError:
        await message.answer("–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    await state.update_data(cost=cost)
    await state.set_state(AddStudioFSM.age)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, '6-12'):")


@admin_studios_router.message(AddStudioFSM.age)
async def add_studio_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await state.set_state(AddStudioFSM.category)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç—É–¥–∏–∏:")


@admin_studios_router.message(AddStudioFSM.category)
async def add_studio_category(message: Message, state: FSMContext):
    await state.update_data(category=message.text.lower())
    await state.set_state(AddStudioFSM.qr_img)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ QR-–∫–∞—Ä—Ç–∏–Ω–∫—É (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):")


@admin_studios_router.message(AddStudioFSM.qr_img)
async def add_studio_qr_img(message: Message, state: FSMContext):
    qr_img = None if message.text == "-" else message.text
    await state.update_data(qr_img=qr_img)
    await state.set_state(AddStudioFSM.img)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—É–¥–∏–∏ (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):")


@admin_studios_router.message(AddStudioFSM.img)
async def add_studio_img(message: Message, state: FSMContext, session: AsyncSession):
    img = None if message.text == "-" else message.text
    await state.update_data(img=img)
    data = await state.get_data()
    await orm_add_studio(session, data)
    await state.clear()
    await message.answer("‚úÖ –°—Ç—É–¥–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_admin_studios_kb())


# --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—É–¥–∏–∏ ---
@admin_studios_router.callback_query(F.data == "edit_studio")
async def edit_studio_start(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    studios = await orm_get_studios(session)
    if not studios:
        await callback.message.answer("‚ùå –ù–µ—Ç —Å—Ç—É–¥–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=st.name.lower(), callback_data=f"edit_studio_{st.id}")] for st in studios]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)


@admin_studios_router.callback_query(F.data.startswith("edit_studio_"))
async def edit_studio_choose(callback: CallbackQuery, state: FSMContext):
    studio_id = int(callback.data.split("_")[2])
    await state.set_state(EditStudioFSM.field)
    await state.update_data(id=studio_id)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="field_name")],
            [InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="field_description")],
            [InlineKeyboardButton(text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="field_teacher")],
            [InlineKeyboardButton(text="–°—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="field_cost")],
            [InlineKeyboardButton(text="–í–æ–∑—Ä–∞—Å—Ç", callback_data="field_age")],
            [InlineKeyboardButton(text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="field_category")],
            [InlineKeyboardButton(text="QR", callback_data="field_qr_img")],
            [InlineKeyboardButton(text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="field_img")],
        ]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=kb)


@admin_studios_router.callback_query(F.data.startswith("field_"), EditStudioFSM.field)
async def edit_studio_field(callback: CallbackQuery, state: FSMContext):
    field = callback.data.replace("field_", "")
    await state.update_data(field=field)
    await state.set_state(EditStudioFSM.value)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è {field}:")


@admin_studios_router.message(EditStudioFSM.value)
async def edit_studio_value(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    field = data["field"]
    value = message.text
    studio_id = data["id"]

    if field == "cost":
        try:
            value = int(value)
        except ValueError:
            await message.answer("–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
            return

    await orm_update_studio(session, studio_id, field, value)
    await state.clear()
    await message.answer("‚úÖ –°—Ç—É–¥–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!", reply_markup=get_admin_studios_kb())


# --- –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—É–¥–∏–∏ ---
@admin_studios_router.callback_query(F.data == "delete_studio")
async def delete_studio_start(callback: CallbackQuery, session: AsyncSession):
    studios = await orm_get_studios(session)
    if not studios:
        await callback.message.answer("‚ùå –ù–µ—Ç —Å—Ç—É–¥–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=st.name.lower(), callback_data=f"delete_studio_{st.id}")] for st in studios]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)


@admin_studios_router.callback_query(F.data.startswith("delete_studio_"))
async def delete_studio_confirm(callback: CallbackQuery, session: AsyncSession):
    studio_id = int(callback.data.split("_")[2])
    await orm_delete_studio(session, studio_id)
    await callback.message.answer("üóë –°—Ç—É–¥–∏—è —É–¥–∞–ª–µ–Ω–∞!", reply_markup=get_admin_studios_kb())



# --- –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å—Ç—É–¥–∏–∏ ---
@admin_studios_router.callback_query(F.data == "update_all_studios")
async def update_all_studios_handler(callback: CallbackQuery, session: AsyncSession):
    await callback.message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ~3 –º–∏–Ω—É—Ç—ã")
    try:
        data, log_text = await asyncio.to_thread(update_all_studios)
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return

    updated, added = 0, 0
    for name, values in data.items():
        try:
            description, cost, age, img, qr_img, teacher, category = values
        except ValueError:
            await callback.message.answer(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—É–¥–∏—è {name}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            continue

        studio = await orm_get_studio_by_name(session, name)
        if studio:
            await orm_update_studio(session, studio.id, "description", description)
            await orm_update_studio(session, studio.id, "cost", int(cost))
            await orm_update_studio(session, studio.id, "age", age)
            await orm_update_studio(session, studio.id, "img", img)
            await orm_update_studio(session, studio.id, "qr_img", qr_img)
            await orm_update_studio(session, studio.id, "teacher", teacher)
            await orm_update_studio(session, studio.id, "category", category)
            updated += 1
        else:
            new_data = {
                "name": name,
                "description": description,
                "teacher": teacher,
                "cost": int(cost),
                "age": age,
                "category": category,
                "qr_img": qr_img,
                "img": img,
            }
            await orm_add_studio(session, new_data)
            added += 1

    await callback.message.answer(
        f"{log_text}\n\n"
        f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}\n"
        f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}",
        reply_markup=get_admin_studios_kb()
    )


# --- –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–∏–π ---

STUDIOS_PER_PAGE = 8

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def get_studios_keyboard(studios, page: int, total_pages: int):
    keyboard = [
        [InlineKeyboardButton(
            text=f"{'üÜì' if studio.cost == 0 else 'üí≥'} {studio.name.capitalize()}",
            callback_data=f"studio_card:{studio.id}:{page}"
        )]
        for studio in studios
    ]

    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚èÆ –ù–∞–∑–∞–¥", callback_data=f"studios_page:{page-1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="‚è≠ –î–∞–ª–µ–µ", callback_data=f"studios_page:{page+1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_studio_detail_keyboard(studio: Studios, page: int):
    buttons = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"studios_page:{page}")]]
    link = 'https://–¥–∫-—è—É–∑–∞.—Ä—Ñ/studii/'
    buttons.append([InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=link)])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------
@admin_studios_router.callback_query(F.data == "list_studios")
async def list_studios(callback: CallbackQuery, session: AsyncSession, page: int = 1):
    offset = (page - 1) * STUDIOS_PER_PAGE
    studios = (await session.execute(
        select(Studios).offset(offset).limit(STUDIOS_PER_PAGE)
    )).scalars().all()

    total = (await session.execute(select(func.count(Studios.id)))).scalar_one()
    total_pages = (total + STUDIOS_PER_PAGE - 1) // STUDIOS_PER_PAGE

    if not studios:
        await callback.message.edit_text("–°—Ç—É–¥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    text = "üìã <b>–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–∏–π:</b>\n\n"
    keyboard = get_studios_keyboard(studios, page, total_pages)

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@admin_studios_router.callback_query(F.data.startswith("studios_page:"))
async def studios_page_handler(callback: CallbackQuery, session: AsyncSession):
    page = int(callback.data.split(":")[1])
    await list_studios(callback, session, page)


@admin_studios_router.callback_query(F.data.startswith("studio_card:"))
async def studio_card_handler(callback: CallbackQuery, session: AsyncSession):
    studio_id, page = map(int, callback.data.split(":")[1:])
    studio = await orm_get_studio(session, studio_id)
    if not studio:
        await callback.answer("–°—Ç—É–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    description = studio.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
    short_desc = description[:500] + ("‚Ä¶" if len(description) > 500 else "")


    await send_item_card(
        callback,
        studio_id,
        page,
        title=studio.name,
        short_text=short_desc,
        img=studio.img,
        detail_callback="studio_detail"
    )

@admin_studios_router.callback_query(F.data.startswith("close_card:"))
async def close_card_handler(callback: CallbackQuery):
    await close_item_card(callback)


@admin_studios_router.callback_query(F.data.startswith("studio_detail:"))
async def studio_detail_handler(callback: CallbackQuery, session: AsyncSession):
    studio_id, page = map(int, callback.data.split(":")[1:])
    studio = await orm_get_studio(session, studio_id)
    if not studio:
        await callback.answer("–°—Ç—É–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    text = (
        f"<b>{studio.name}</b>\n\n"
        f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {studio.teacher or '‚Äî'}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {studio.cost} —Ä—É–±.\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {studio.age}\n"
        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {studio.category}\n"
        f"‚è± –û–±–Ω–æ–≤–ª–µ–Ω–æ: {studio.updated}\n\n"
        f"‚ÑπÔ∏è {studio.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
    )

    kb = get_studio_detail_keyboard(studio, page)

    if studio.img:
        await callback.message.edit_caption(caption=text[:1024], reply_markup=kb, parse_mode="HTML")
    else:
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")

    await callback.answer()
