"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏ (Events).
"""

import asyncio
import logging
from datetime import datetime

from aiogram import Router, F, types, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import or_f, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from database import orm_query
from database.orm_query import (
    orm_add_event,
    orm_update_event,
    orm_delete_event,
    orm_get_events,
    orm_get_event_by_name, orm_get_event,
)
from logic.helper import Big_litter_start
from logic.scrap_events import update_all_events, find_age_limits
from handlers.notification import notify_subscribers
from filter.filter import IsEditor, IsSuperAdmin


# ================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==================

logger = logging.getLogger(__name__)

# ================== –†–û–£–¢–ï–† ==================
admin_events_router = Router()
admin_events_router.message.filter(or_f(IsSuperAdmin(), IsEditor()))


# ================== FSM ==================
class AddEventFSM(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è."""
    name = State()
    is_free = State()
    date = State()
    description = State()
    link = State()
    img = State()
    notify = State()


class EditEventFSM(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è."""
    id = State()
    field = State()
    value = State()


# ================== –ö–ù–û–ü–ö–ò ==================
def get_admin_events_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏."""
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="add_event")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="edit_event")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="delete_event")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è", callback_data="update_all_events")],
        [InlineKeyboardButton(text="üõ† –í –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


PER_PAGE = 10

def get_events_keyboard(events, page: int = 0):
    """Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º."""
    events = sorted(events, key=lambda e: e.name.lower())
    builder = InlineKeyboardBuilder()
    start, end = page * PER_PAGE, page * PER_PAGE + PER_PAGE
    for ev in events[start:end]:
        title = getattr(ev, "title", None)
        text = title if title else Big_litter_start(ev.name)
        builder.button(text=text, callback_data=f"edit_event_{ev.id}")

    builder.button(text="üõ†–í –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="edit_events_panel")
    builder.adjust(1)
    if page > 0:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"events_page_{page-1}")
    if end < len(events):
        builder.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"events_page_{page+1}")
    return builder.as_markup()

def get_delete_events_keyboard(events, page: int = 0):
    """Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º."""
    events = sorted(events, key=lambda e: e.name.lower())
    builder = InlineKeyboardBuilder()
    start, end = page * PER_PAGE, page * PER_PAGE + PER_PAGE
    builder.button(text="üî•–£–¥–∞–ª–∏—Ç—å –≤—Å—ë, –∫—Ä–æ–º–µ –∑–∞—â–∏—â—ë–Ω–Ω—ã—Ö", callback_data="delete_all_events")
    for ev in events[start:end]:
        builder.button(text=f"üóë {ev.name}", callback_data=f"delete_event_{ev.id}")
    builder.button(text="–í –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="edit_events_panel")
    builder.adjust(1)
    if page > 0:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"delete_events_page_{page-1}")
    if end < len(events):
        builder.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"delete_events_page_{page+1}")
    return builder.as_markup()


def back_kb():
    return InlineKeyboardMarkup(inline_keyboard=[[

        InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",callback_data="edit_events_panel")
    ]])

# ================== –ú–ï–ù–Æ ==================
@admin_events_router.message(Command("edit_events"))
@admin_events_router.callback_query(F.data == "edit_events_panel")
async def show_admin_events_menu(event: types.Message | CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏."""
    text = "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏:"
    kb = get_admin_events_kb()

    if isinstance(event, CallbackQuery):
        try:
            # –ø—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–∞—à–µ
            await event.message.edit_text(text, reply_markup=kb)
        except Exception:
            # fallback: –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await event.message.answer(text, reply_markup=kb)
    elif isinstance(event, types.Message):
        # –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚Äî –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await event.answer(text, reply_markup=kb)

    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ñ–∏—à–∏ (user_id={event.from_user.id})")



# ================== –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–û–ë–´–¢–ò–Ø ==================
@admin_events_router.callback_query(F.data == "add_event")
async def add_event_start(callback: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(AddEventFSM.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:", reply_markup=back_kb())
    logger.debug("–ù–∞—á–∞—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")


@admin_events_router.message(AddEventFSM.name)
async def add_event_name(message: Message, state: FSMContext) -> None:
    await state.update_data(name=message.text)
    await state.set_state(AddEventFSM.is_free)
    await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ? (–î–∞/–Ω–µ—Ç)", reply_markup=back_kb())
    logger.debug(f"–£–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: {message.text}")


@admin_events_router.message(AddEventFSM.is_free)
async def add_event_is_free(message: Message, state: FSMContext) -> None:
    is_free = message.text.lower() in ["yes", "–¥–∞", "1","True"]
    await state.update_data(is_free=is_free)
    await state.set_state(AddEventFSM.date)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)\n"
        "–ò–ª–∏ '-' –¥–ª—è –≤—ã—Ö–æ–¥–∞.", reply_markup=back_kb()
    )
    logger.debug("–£–∫–∞–∑–∞–Ω–æ, –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")


@admin_events_router.message(AddEventFSM.date)
async def add_event_date(message: Message, state: FSMContext) -> None:
    if message.text == "-":
        await state.clear()
        logger.info("–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    try:
        event_date = datetime.strptime(message.text, "%Y-%m-%d %H:%M")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 2025-08-21 18:30", reply_markup=back_kb())
        return
    await state.update_data(date=event_date)
    await state.set_state(AddEventFSM.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:", reply_markup=back_kb())
    logger.debug(f"–£–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è: {event_date}")


@admin_events_router.message(AddEventFSM.description)
async def add_event_description(message: Message, state: FSMContext) -> None:
    age_limit = find_age_limits(message.text)
    await state.update_data(description=message.text, age_limits=age_limit)
    await state.set_state(AddEventFSM.link)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –±–∏–ª–µ—Ç–æ–≤ (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ):", reply_markup=back_kb())
    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")


@admin_events_router.message(AddEventFSM.link)
async def add_event_link(message: Message, state: FSMContext) -> None:
    link = None if message.text == "-" else message.text
    await state.update_data(link=link)
    await state.set_state(AddEventFSM.img)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):", reply_markup=back_kb())
    logger.debug(f"–£–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ —Å–æ–±—ã—Ç–∏—è: {link}")


@admin_events_router.message(AddEventFSM.img)
async def add_event_img(message: Message, state: FSMContext, session: AsyncSession) -> None:
    img = None if message.text == "-" else message.text
    await state.update_data(img=img)
    data = await state.get_data()

    await orm_add_event(session, data)
    await state.set_state(AddEventFSM.notify)

    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {data['name']} ({data['date']})")
    await message.answer(
        f"‚úÖ –°–æ–±—ã—Ç–∏–µ '{data['name']}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
        "–•–æ—Ç–∏—Ç–µ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? (–î–∞/–ù–µ—Ç)"
    )


@admin_events_router.message(AddEventFSM.notify)
async def add_event_notify(
    message: Message,
    state: FSMContext,
    session: AsyncSession,
    bot: Bot,
) -> None:
    notify = message.text.lower() in {"yes", "–¥–∞", "1","True"}
    data = await state.get_data()

    if notify:
        await notify_subscribers(
            bot,
            session,
            f"üì∞ –ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {data['name']} \n\n{data['date']}",
            data["img"],
            type_="events",
        )
        await message.answer("üëç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω—ã.", reply_markup=get_admin_events_kb())
        logger.info(f"–û–ø–æ–≤–µ—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏: {data['name']}")
    else:
        await message.answer("üëç –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –±–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.", reply_markup=get_admin_events_kb())
        logger.info(f"–°–æ–±—ã—Ç–∏–µ {data['name']} –¥–æ–±–∞–≤–ª–µ–Ω–æ –±–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è")
    await state.clear()


# ================== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ë–´–¢–ò–Ø ==================
# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ---
@admin_events_router.callback_query(F.data == "edit_event")
async def edit_event_start(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    events = await orm_get_events(session)
    if not events:
        await callback.message.answer("‚ùå –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return
    await state.update_data(events=[{"id": e.id, "name": e.name} for e in events])
    kb = get_events_keyboard(events, page=0)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ:", reply_markup=kb)


@admin_events_router.callback_query(F.data.startswith("events_page_"))
async def events_page(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    events = [type("Obj", (), e) for e in data["events"]]
    page = int(callback.data.split("_")[-1])
    kb = get_events_keyboard(events, page=page)
    await callback.message.edit_reply_markup(reply_markup=kb)



@admin_events_router.callback_query(F.data.startswith("edit_event_"))
async def edit_event_choose(callback: CallbackQuery, state: FSMContext) -> None:
    event_id = int(callback.data.split("_")[2])
    await state.update_data(id=event_id)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="field_title")],
            [InlineKeyboardButton(text="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ? (–¥–∞/–Ω–µ—Ç)", callback_data="field_is_free")],
            [InlineKeyboardButton(text="–î–∞—Ç–∞", callback_data="field_date")],
            [InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="field_description")],
            [InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞", callback_data="field_link")],
            [InlineKeyboardButton(text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="field_img")],
            [InlineKeyboardButton(text="–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è(–¥–∞/–Ω–µ—Ç)", callback_data="field_lock_changes")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"edit_event")]

        ]
    )
    await state.set_state(EditEventFSM.field)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=kb)
    logger.debug(f"–ê–¥–º–∏–Ω –≤—ã–±—Ä–∞–ª —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: id={event_id}")


@admin_events_router.callback_query(F.data.startswith("field_"), EditEventFSM.field)
async def edit_event_field(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    field = callback.data.replace("field_", "")
    await state.update_data(field=field)
    await state.set_state(EditEventFSM.value)
    data = await state.get_data()
    event = await orm_get_event(session, data["id"])
    if field != 'title':
        current_value = getattr(event, field, None)
    else:
        if event.title == '':
            current_value = Big_litter_start(getattr(event, 'name', None))
        else:
            current_value = getattr(event, 'title', None)

    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è {field}:\n"
                                  f"{'–í–≤–µ–¥–∏—Ç–µ - —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è' if field=='title' else ''}"
                                  f"\n–ó–Ω–∞—á–µ–Ω–∏–µ —Å–µ–π—á–∞—Å:")
    await callback.message.answer(f"{current_value}")
    logger.debug(f"–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–ª–µ —Å–æ–±—ã—Ç–∏—è: {field}")


@admin_events_router.message(EditEventFSM.value)
async def edit_event_value(message: Message, state: FSMContext, session: AsyncSession) -> None:
    data = await state.get_data()
    field, value = data["field"], message.text
    if message.text == "-":
        value = ''
    if field == "date":
        try:
            value = datetime.strptime(value, "%Y-%m-%d %H:%M")
        except ValueError:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: 2025-08-21 18:30")
            return
    if field == "is_free":
        value = value.lower() in ["–¥–∞", "yes", 1,"True"]
    if field == "lock_changes":
        value = value.lower() in ["–¥–∞", "yes", 1,"True"]
    await orm_update_event(session, data["id"], {"lock_changes": True})
    await orm_update_event(session, data["id"], {field: value})
    await state.clear()
    await message.answer("‚úÖ –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!", reply_markup=get_admin_events_kb())
    logger.info(f"–°–æ–±—ã—Ç–∏–µ id={data['id']} –∏–∑–º–µ–Ω–µ–Ω–æ (–ø–æ–ª–µ {field}) user_id={message.from_user.id}")


# ================== –£–î–ê–õ–ï–ù–ò–ï –°–û–ë–´–¢–ò–Ø ==================
@admin_events_router.callback_query(F.data == "delete_event")
async def delete_event_start(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    events = await orm_get_events(session)
    if not events:
        await callback.message.answer("‚ùå –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    await state.update_data(delete_events=[{"id": e.id, "name": e.name} for e in events])
    kb = get_delete_events_keyboard(events, page=0)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

@admin_events_router.callback_query(F.data.startswith("delete_events_page_"))
async def delete_events_page(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    events = [type("Obj", (), e) for e in data["delete_events"]]
    page = int(callback.data.split("_")[-1])
    kb = get_delete_events_keyboard(events, page=page)
    await callback.message.edit_reply_markup(reply_markup=kb)

@admin_events_router.callback_query(F.data.startswith("delete_event_"))
async def delete_event_confirm(callback: CallbackQuery, session: AsyncSession):
    event_id = int(callback.data.split("_")[2])
    await orm_delete_event(session, event_id)
    await callback.message.answer("üóë –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=get_admin_events_kb())

@admin_events_router.callback_query(F.data == "delete_all_events")
async def delete_all_events_handler(callback: CallbackQuery, session: AsyncSession):
    events = await orm_get_events(session)
    deleted_count = 0
    for ev in events:
        if not getattr(ev, "lock_changes", False):
            try:
                await orm_delete_event(session, ev.id)
                deleted_count += 1
            except Exception as e:
                logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è id=%s: %s", ev.id, e)
    await callback.message.answer(
        f"üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {deleted_count}\n"
        f"‚úÖ –ó–∞—â–∏—â—ë–Ω–Ω—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ –º–µ—Å—Ç–µ.", reply_markup=back_kb()
    )


# ================== –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–°–ï–• –°–û–ë–´–¢–ò–ô ==================
@admin_events_router.callback_query(F.data == "update_all_events")
async def update_all_events_prompt(callback: CallbackQuery) -> None:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–° –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ–º", callback_data="update_all_events_True")],
            [InlineKeyboardButton(text="–ë–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data="update_all_events_False")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="edit_events_panel")],
        ]
    )
    await callback.message.answer("–û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?", reply_markup=kb)


@admin_events_router.callback_query(F.data.startswith("update_all_events_"))
async def update_all_events_handler(callback: CallbackQuery, session: AsyncSession, bot: Bot) -> None:
    update = callback.data.endswith("True")

    await callback.message.answer(
        "üîÑ –ó–∞–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ñ–∏—à–∏...\n"
        "–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: 2‚Äì3 –º–∏–Ω—É—Ç—ã"
    )

    try:
        data, log_text = await asyncio.to_thread(update_all_events)
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ñ–∏—à–∏: {e}", exc_info=True)
        return

    updated, added = 0, 0

    for name, values in data.items():
        try:
            event_date, description, age_limits, img, link, is_free = values
        except ValueError:
            await callback.message.answer(f"‚ö† –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {name}")
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {name}")
            continue

        event = await orm_query.orm_get_event_by_name(session, name)
        if event:
            if event.lock_changes == False:
                await orm_update_event(session, event.id, {
                    "date": datetime.strptime(event_date, "%Y-%m-%d %H:%M"),
                    "description": description,
                    "age_limits": age_limits,
                    "img": img,
                    "link": link,
                    "is_free": is_free
                })
                updated += 1
        else:
            await orm_add_event(session, {
                "name": name,
                "date": datetime.strptime(event_date, "%Y-%m-%d %H:%M"),
                "description": description,
                "age_limits": age_limits,
                "img": img,
                "link": link,
                "is_free": is_free
            })
            added += 1

            if update:
                text = f"{name.capitalize()} | +{age_limits}\n\n{event_date}"
                await notify_subscribers(
                    bot, session,
                    f"üì∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –∞—Ñ–∏—à–µ! \n\n{text}",
                    img,
                    type_="events",
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω—ã –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏: {name}")

    await callback.message.answer(
        f"{log_text}\n\n"
        f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}\n"
        f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}",
        reply_markup=get_admin_events_kb(),
    )
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ñ–∏—à–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –æ–±–Ω–æ–≤–ª–µ–Ω–æ={updated}, –¥–æ–±–∞–≤–ª–µ–Ω–æ={added}")